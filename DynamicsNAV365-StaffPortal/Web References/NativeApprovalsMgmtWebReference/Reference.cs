//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace DynamicsNAV365_StaffPortal.NativeApprovalsMgmtWebReference {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Approvals_Mgmt_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt")]
    public partial class Approvals_Mgmt : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CopyApprovalEntryQuoteToOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenApprovalEntriesPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback CanCancelApprovalForRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback OnRenameRecordInApprovalRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback OnDeleteRecordInApprovalRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApproveRecordApprovalRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback RejectRecordApprovalRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelegateRecordApprovalRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsOverdueNotificationsWorkflowEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostApprovalEntriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ShowPostedApprovalEntriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePostedApprovalEntriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasOpenApprovalEntriesForCurrentUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasOpenApprovalEntriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasOpenOrPendingApprovalEntriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasApprovalEntriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasAnyOpenJournalLineApprovalEntriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameApprovalEntriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteApprovalEntriesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Approvals_Mgmt() {
            this.Url = global::DynamicsNAV365_StaffPortal.Properties.Settings.Default.DynamicsNAV365_StaffPortal_NativeApprovalsMgmtWebReference_Approvals_Mgmt;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CopyApprovalEntryQuoteToOrderCompletedEventHandler CopyApprovalEntryQuoteToOrderCompleted;
        
        /// <remarks/>
        public event OpenApprovalEntriesPageCompletedEventHandler OpenApprovalEntriesPageCompleted;
        
        /// <remarks/>
        public event CanCancelApprovalForRecordCompletedEventHandler CanCancelApprovalForRecordCompleted;
        
        /// <remarks/>
        public event OnRenameRecordInApprovalRequestCompletedEventHandler OnRenameRecordInApprovalRequestCompleted;
        
        /// <remarks/>
        public event OnDeleteRecordInApprovalRequestCompletedEventHandler OnDeleteRecordInApprovalRequestCompleted;
        
        /// <remarks/>
        public event ApproveRecordApprovalRequestCompletedEventHandler ApproveRecordApprovalRequestCompleted;
        
        /// <remarks/>
        public event RejectRecordApprovalRequestCompletedEventHandler RejectRecordApprovalRequestCompleted;
        
        /// <remarks/>
        public event DelegateRecordApprovalRequestCompletedEventHandler DelegateRecordApprovalRequestCompleted;
        
        /// <remarks/>
        public event IsOverdueNotificationsWorkflowEnabledCompletedEventHandler IsOverdueNotificationsWorkflowEnabledCompleted;
        
        /// <remarks/>
        public event PostApprovalEntriesCompletedEventHandler PostApprovalEntriesCompleted;
        
        /// <remarks/>
        public event ShowPostedApprovalEntriesCompletedEventHandler ShowPostedApprovalEntriesCompleted;
        
        /// <remarks/>
        public event DeletePostedApprovalEntriesCompletedEventHandler DeletePostedApprovalEntriesCompleted;
        
        /// <remarks/>
        public event HasOpenApprovalEntriesForCurrentUserCompletedEventHandler HasOpenApprovalEntriesForCurrentUserCompleted;
        
        /// <remarks/>
        public event HasOpenApprovalEntriesCompletedEventHandler HasOpenApprovalEntriesCompleted;
        
        /// <remarks/>
        public event HasOpenOrPendingApprovalEntriesCompletedEventHandler HasOpenOrPendingApprovalEntriesCompleted;
        
        /// <remarks/>
        public event HasApprovalEntriesCompletedEventHandler HasApprovalEntriesCompleted;
        
        /// <remarks/>
        public event HasAnyOpenJournalLineApprovalEntriesCompletedEventHandler HasAnyOpenJournalLineApprovalEntriesCompleted;
        
        /// <remarks/>
        public event RenameApprovalEntriesCompletedEventHandler RenameApprovalEntriesCompleted;
        
        /// <remarks/>
        public event DeleteApprovalEntriesCompletedEventHandler DeleteApprovalEntriesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:CopyApprovalEntryQuoteToOr" +
            "der", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="CopyApprovalEntryQuoteToOrder_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CopyApprovalEntryQuoteToOrder(string fromRecID, string toDocNo, string toRecID) {
            this.Invoke("CopyApprovalEntryQuoteToOrder", new object[] {
                        fromRecID,
                        toDocNo,
                        toRecID});
        }
        
        /// <remarks/>
        public void CopyApprovalEntryQuoteToOrderAsync(string fromRecID, string toDocNo, string toRecID) {
            this.CopyApprovalEntryQuoteToOrderAsync(fromRecID, toDocNo, toRecID, null);
        }
        
        /// <remarks/>
        public void CopyApprovalEntryQuoteToOrderAsync(string fromRecID, string toDocNo, string toRecID, object userState) {
            if ((this.CopyApprovalEntryQuoteToOrderOperationCompleted == null)) {
                this.CopyApprovalEntryQuoteToOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyApprovalEntryQuoteToOrderOperationCompleted);
            }
            this.InvokeAsync("CopyApprovalEntryQuoteToOrder", new object[] {
                        fromRecID,
                        toDocNo,
                        toRecID}, this.CopyApprovalEntryQuoteToOrderOperationCompleted, userState);
        }
        
        private void OnCopyApprovalEntryQuoteToOrderOperationCompleted(object arg) {
            if ((this.CopyApprovalEntryQuoteToOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyApprovalEntryQuoteToOrderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:OpenApprovalEntriesPage", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="OpenApprovalEntriesPage_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OpenApprovalEntriesPage(string recId) {
            this.Invoke("OpenApprovalEntriesPage", new object[] {
                        recId});
        }
        
        /// <remarks/>
        public void OpenApprovalEntriesPageAsync(string recId) {
            this.OpenApprovalEntriesPageAsync(recId, null);
        }
        
        /// <remarks/>
        public void OpenApprovalEntriesPageAsync(string recId, object userState) {
            if ((this.OpenApprovalEntriesPageOperationCompleted == null)) {
                this.OpenApprovalEntriesPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenApprovalEntriesPageOperationCompleted);
            }
            this.InvokeAsync("OpenApprovalEntriesPage", new object[] {
                        recId}, this.OpenApprovalEntriesPageOperationCompleted, userState);
        }
        
        private void OnOpenApprovalEntriesPageOperationCompleted(object arg) {
            if ((this.OpenApprovalEntriesPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenApprovalEntriesPageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:CanCancelApprovalForRecord" +
            "", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="CanCancelApprovalForRecord_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool CanCancelApprovalForRecord(string recID) {
            object[] results = this.Invoke("CanCancelApprovalForRecord", new object[] {
                        recID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CanCancelApprovalForRecordAsync(string recID) {
            this.CanCancelApprovalForRecordAsync(recID, null);
        }
        
        /// <remarks/>
        public void CanCancelApprovalForRecordAsync(string recID, object userState) {
            if ((this.CanCancelApprovalForRecordOperationCompleted == null)) {
                this.CanCancelApprovalForRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCanCancelApprovalForRecordOperationCompleted);
            }
            this.InvokeAsync("CanCancelApprovalForRecord", new object[] {
                        recID}, this.CanCancelApprovalForRecordOperationCompleted, userState);
        }
        
        private void OnCanCancelApprovalForRecordOperationCompleted(object arg) {
            if ((this.CanCancelApprovalForRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CanCancelApprovalForRecordCompleted(this, new CanCancelApprovalForRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:OnRenameRecordInApprovalRe" +
            "quest", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="OnRenameRecordInApprovalRequest_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OnRenameRecordInApprovalRequest(string oldRecordId, string newRecordId) {
            this.Invoke("OnRenameRecordInApprovalRequest", new object[] {
                        oldRecordId,
                        newRecordId});
        }
        
        /// <remarks/>
        public void OnRenameRecordInApprovalRequestAsync(string oldRecordId, string newRecordId) {
            this.OnRenameRecordInApprovalRequestAsync(oldRecordId, newRecordId, null);
        }
        
        /// <remarks/>
        public void OnRenameRecordInApprovalRequestAsync(string oldRecordId, string newRecordId, object userState) {
            if ((this.OnRenameRecordInApprovalRequestOperationCompleted == null)) {
                this.OnRenameRecordInApprovalRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOnRenameRecordInApprovalRequestOperationCompleted);
            }
            this.InvokeAsync("OnRenameRecordInApprovalRequest", new object[] {
                        oldRecordId,
                        newRecordId}, this.OnRenameRecordInApprovalRequestOperationCompleted, userState);
        }
        
        private void OnOnRenameRecordInApprovalRequestOperationCompleted(object arg) {
            if ((this.OnRenameRecordInApprovalRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OnRenameRecordInApprovalRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:OnDeleteRecordInApprovalRe" +
            "quest", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="OnDeleteRecordInApprovalRequest_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OnDeleteRecordInApprovalRequest(string recordIDToApprove) {
            this.Invoke("OnDeleteRecordInApprovalRequest", new object[] {
                        recordIDToApprove});
        }
        
        /// <remarks/>
        public void OnDeleteRecordInApprovalRequestAsync(string recordIDToApprove) {
            this.OnDeleteRecordInApprovalRequestAsync(recordIDToApprove, null);
        }
        
        /// <remarks/>
        public void OnDeleteRecordInApprovalRequestAsync(string recordIDToApprove, object userState) {
            if ((this.OnDeleteRecordInApprovalRequestOperationCompleted == null)) {
                this.OnDeleteRecordInApprovalRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOnDeleteRecordInApprovalRequestOperationCompleted);
            }
            this.InvokeAsync("OnDeleteRecordInApprovalRequest", new object[] {
                        recordIDToApprove}, this.OnDeleteRecordInApprovalRequestOperationCompleted, userState);
        }
        
        private void OnOnDeleteRecordInApprovalRequestOperationCompleted(object arg) {
            if ((this.OnDeleteRecordInApprovalRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OnDeleteRecordInApprovalRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:ApproveRecordApprovalReque" +
            "st", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="ApproveRecordApprovalRequest_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ApproveRecordApprovalRequest(string recordID) {
            this.Invoke("ApproveRecordApprovalRequest", new object[] {
                        recordID});
        }
        
        /// <remarks/>
        public void ApproveRecordApprovalRequestAsync(string recordID) {
            this.ApproveRecordApprovalRequestAsync(recordID, null);
        }
        
        /// <remarks/>
        public void ApproveRecordApprovalRequestAsync(string recordID, object userState) {
            if ((this.ApproveRecordApprovalRequestOperationCompleted == null)) {
                this.ApproveRecordApprovalRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApproveRecordApprovalRequestOperationCompleted);
            }
            this.InvokeAsync("ApproveRecordApprovalRequest", new object[] {
                        recordID}, this.ApproveRecordApprovalRequestOperationCompleted, userState);
        }
        
        private void OnApproveRecordApprovalRequestOperationCompleted(object arg) {
            if ((this.ApproveRecordApprovalRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApproveRecordApprovalRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:RejectRecordApprovalReques" +
            "t", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="RejectRecordApprovalRequest_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RejectRecordApprovalRequest(string recordID) {
            this.Invoke("RejectRecordApprovalRequest", new object[] {
                        recordID});
        }
        
        /// <remarks/>
        public void RejectRecordApprovalRequestAsync(string recordID) {
            this.RejectRecordApprovalRequestAsync(recordID, null);
        }
        
        /// <remarks/>
        public void RejectRecordApprovalRequestAsync(string recordID, object userState) {
            if ((this.RejectRecordApprovalRequestOperationCompleted == null)) {
                this.RejectRecordApprovalRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRejectRecordApprovalRequestOperationCompleted);
            }
            this.InvokeAsync("RejectRecordApprovalRequest", new object[] {
                        recordID}, this.RejectRecordApprovalRequestOperationCompleted, userState);
        }
        
        private void OnRejectRecordApprovalRequestOperationCompleted(object arg) {
            if ((this.RejectRecordApprovalRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RejectRecordApprovalRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:DelegateRecordApprovalRequ" +
            "est", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="DelegateRecordApprovalRequest_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelegateRecordApprovalRequest(string recordID) {
            this.Invoke("DelegateRecordApprovalRequest", new object[] {
                        recordID});
        }
        
        /// <remarks/>
        public void DelegateRecordApprovalRequestAsync(string recordID) {
            this.DelegateRecordApprovalRequestAsync(recordID, null);
        }
        
        /// <remarks/>
        public void DelegateRecordApprovalRequestAsync(string recordID, object userState) {
            if ((this.DelegateRecordApprovalRequestOperationCompleted == null)) {
                this.DelegateRecordApprovalRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelegateRecordApprovalRequestOperationCompleted);
            }
            this.InvokeAsync("DelegateRecordApprovalRequest", new object[] {
                        recordID}, this.DelegateRecordApprovalRequestOperationCompleted, userState);
        }
        
        private void OnDelegateRecordApprovalRequestOperationCompleted(object arg) {
            if ((this.DelegateRecordApprovalRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelegateRecordApprovalRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:IsOverdueNotificationsWork" +
            "flowEnabled", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="IsOverdueNotificationsWorkflowEnabled_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool IsOverdueNotificationsWorkflowEnabled() {
            object[] results = this.Invoke("IsOverdueNotificationsWorkflowEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsOverdueNotificationsWorkflowEnabledAsync() {
            this.IsOverdueNotificationsWorkflowEnabledAsync(null);
        }
        
        /// <remarks/>
        public void IsOverdueNotificationsWorkflowEnabledAsync(object userState) {
            if ((this.IsOverdueNotificationsWorkflowEnabledOperationCompleted == null)) {
                this.IsOverdueNotificationsWorkflowEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsOverdueNotificationsWorkflowEnabledOperationCompleted);
            }
            this.InvokeAsync("IsOverdueNotificationsWorkflowEnabled", new object[0], this.IsOverdueNotificationsWorkflowEnabledOperationCompleted, userState);
        }
        
        private void OnIsOverdueNotificationsWorkflowEnabledOperationCompleted(object arg) {
            if ((this.IsOverdueNotificationsWorkflowEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsOverdueNotificationsWorkflowEnabledCompleted(this, new IsOverdueNotificationsWorkflowEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:PostApprovalEntries", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="PostApprovalEntries_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool PostApprovalEntries(string approvedRecordID, string postedRecordID, string postedDocNo) {
            object[] results = this.Invoke("PostApprovalEntries", new object[] {
                        approvedRecordID,
                        postedRecordID,
                        postedDocNo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PostApprovalEntriesAsync(string approvedRecordID, string postedRecordID, string postedDocNo) {
            this.PostApprovalEntriesAsync(approvedRecordID, postedRecordID, postedDocNo, null);
        }
        
        /// <remarks/>
        public void PostApprovalEntriesAsync(string approvedRecordID, string postedRecordID, string postedDocNo, object userState) {
            if ((this.PostApprovalEntriesOperationCompleted == null)) {
                this.PostApprovalEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostApprovalEntriesOperationCompleted);
            }
            this.InvokeAsync("PostApprovalEntries", new object[] {
                        approvedRecordID,
                        postedRecordID,
                        postedDocNo}, this.PostApprovalEntriesOperationCompleted, userState);
        }
        
        private void OnPostApprovalEntriesOperationCompleted(object arg) {
            if ((this.PostApprovalEntriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostApprovalEntriesCompleted(this, new PostApprovalEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:ShowPostedApprovalEntries", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="ShowPostedApprovalEntries_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ShowPostedApprovalEntries(string postedRecordID) {
            this.Invoke("ShowPostedApprovalEntries", new object[] {
                        postedRecordID});
        }
        
        /// <remarks/>
        public void ShowPostedApprovalEntriesAsync(string postedRecordID) {
            this.ShowPostedApprovalEntriesAsync(postedRecordID, null);
        }
        
        /// <remarks/>
        public void ShowPostedApprovalEntriesAsync(string postedRecordID, object userState) {
            if ((this.ShowPostedApprovalEntriesOperationCompleted == null)) {
                this.ShowPostedApprovalEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnShowPostedApprovalEntriesOperationCompleted);
            }
            this.InvokeAsync("ShowPostedApprovalEntries", new object[] {
                        postedRecordID}, this.ShowPostedApprovalEntriesOperationCompleted, userState);
        }
        
        private void OnShowPostedApprovalEntriesOperationCompleted(object arg) {
            if ((this.ShowPostedApprovalEntriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ShowPostedApprovalEntriesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:DeletePostedApprovalEntrie" +
            "s", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="DeletePostedApprovalEntries_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePostedApprovalEntries(string postedRecordID) {
            this.Invoke("DeletePostedApprovalEntries", new object[] {
                        postedRecordID});
        }
        
        /// <remarks/>
        public void DeletePostedApprovalEntriesAsync(string postedRecordID) {
            this.DeletePostedApprovalEntriesAsync(postedRecordID, null);
        }
        
        /// <remarks/>
        public void DeletePostedApprovalEntriesAsync(string postedRecordID, object userState) {
            if ((this.DeletePostedApprovalEntriesOperationCompleted == null)) {
                this.DeletePostedApprovalEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePostedApprovalEntriesOperationCompleted);
            }
            this.InvokeAsync("DeletePostedApprovalEntries", new object[] {
                        postedRecordID}, this.DeletePostedApprovalEntriesOperationCompleted, userState);
        }
        
        private void OnDeletePostedApprovalEntriesOperationCompleted(object arg) {
            if ((this.DeletePostedApprovalEntriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePostedApprovalEntriesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:HasOpenApprovalEntriesForC" +
            "urrentUser", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="HasOpenApprovalEntriesForCurrentUser_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool HasOpenApprovalEntriesForCurrentUser(string recordID) {
            object[] results = this.Invoke("HasOpenApprovalEntriesForCurrentUser", new object[] {
                        recordID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasOpenApprovalEntriesForCurrentUserAsync(string recordID) {
            this.HasOpenApprovalEntriesForCurrentUserAsync(recordID, null);
        }
        
        /// <remarks/>
        public void HasOpenApprovalEntriesForCurrentUserAsync(string recordID, object userState) {
            if ((this.HasOpenApprovalEntriesForCurrentUserOperationCompleted == null)) {
                this.HasOpenApprovalEntriesForCurrentUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasOpenApprovalEntriesForCurrentUserOperationCompleted);
            }
            this.InvokeAsync("HasOpenApprovalEntriesForCurrentUser", new object[] {
                        recordID}, this.HasOpenApprovalEntriesForCurrentUserOperationCompleted, userState);
        }
        
        private void OnHasOpenApprovalEntriesForCurrentUserOperationCompleted(object arg) {
            if ((this.HasOpenApprovalEntriesForCurrentUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasOpenApprovalEntriesForCurrentUserCompleted(this, new HasOpenApprovalEntriesForCurrentUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:HasOpenApprovalEntries", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="HasOpenApprovalEntries_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool HasOpenApprovalEntries(string recordID) {
            object[] results = this.Invoke("HasOpenApprovalEntries", new object[] {
                        recordID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasOpenApprovalEntriesAsync(string recordID) {
            this.HasOpenApprovalEntriesAsync(recordID, null);
        }
        
        /// <remarks/>
        public void HasOpenApprovalEntriesAsync(string recordID, object userState) {
            if ((this.HasOpenApprovalEntriesOperationCompleted == null)) {
                this.HasOpenApprovalEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasOpenApprovalEntriesOperationCompleted);
            }
            this.InvokeAsync("HasOpenApprovalEntries", new object[] {
                        recordID}, this.HasOpenApprovalEntriesOperationCompleted, userState);
        }
        
        private void OnHasOpenApprovalEntriesOperationCompleted(object arg) {
            if ((this.HasOpenApprovalEntriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasOpenApprovalEntriesCompleted(this, new HasOpenApprovalEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:HasOpenOrPendingApprovalEn" +
            "tries", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="HasOpenOrPendingApprovalEntries_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool HasOpenOrPendingApprovalEntries(string recordID) {
            object[] results = this.Invoke("HasOpenOrPendingApprovalEntries", new object[] {
                        recordID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasOpenOrPendingApprovalEntriesAsync(string recordID) {
            this.HasOpenOrPendingApprovalEntriesAsync(recordID, null);
        }
        
        /// <remarks/>
        public void HasOpenOrPendingApprovalEntriesAsync(string recordID, object userState) {
            if ((this.HasOpenOrPendingApprovalEntriesOperationCompleted == null)) {
                this.HasOpenOrPendingApprovalEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasOpenOrPendingApprovalEntriesOperationCompleted);
            }
            this.InvokeAsync("HasOpenOrPendingApprovalEntries", new object[] {
                        recordID}, this.HasOpenOrPendingApprovalEntriesOperationCompleted, userState);
        }
        
        private void OnHasOpenOrPendingApprovalEntriesOperationCompleted(object arg) {
            if ((this.HasOpenOrPendingApprovalEntriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasOpenOrPendingApprovalEntriesCompleted(this, new HasOpenOrPendingApprovalEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:HasApprovalEntries", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="HasApprovalEntries_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool HasApprovalEntries(string recordID) {
            object[] results = this.Invoke("HasApprovalEntries", new object[] {
                        recordID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasApprovalEntriesAsync(string recordID) {
            this.HasApprovalEntriesAsync(recordID, null);
        }
        
        /// <remarks/>
        public void HasApprovalEntriesAsync(string recordID, object userState) {
            if ((this.HasApprovalEntriesOperationCompleted == null)) {
                this.HasApprovalEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasApprovalEntriesOperationCompleted);
            }
            this.InvokeAsync("HasApprovalEntries", new object[] {
                        recordID}, this.HasApprovalEntriesOperationCompleted, userState);
        }
        
        private void OnHasApprovalEntriesOperationCompleted(object arg) {
            if ((this.HasApprovalEntriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasApprovalEntriesCompleted(this, new HasApprovalEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:HasAnyOpenJournalLineAppro" +
            "valEntries", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="HasAnyOpenJournalLineApprovalEntries_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool HasAnyOpenJournalLineApprovalEntries(string journalTemplateName, string journalBatchName) {
            object[] results = this.Invoke("HasAnyOpenJournalLineApprovalEntries", new object[] {
                        journalTemplateName,
                        journalBatchName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasAnyOpenJournalLineApprovalEntriesAsync(string journalTemplateName, string journalBatchName) {
            this.HasAnyOpenJournalLineApprovalEntriesAsync(journalTemplateName, journalBatchName, null);
        }
        
        /// <remarks/>
        public void HasAnyOpenJournalLineApprovalEntriesAsync(string journalTemplateName, string journalBatchName, object userState) {
            if ((this.HasAnyOpenJournalLineApprovalEntriesOperationCompleted == null)) {
                this.HasAnyOpenJournalLineApprovalEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasAnyOpenJournalLineApprovalEntriesOperationCompleted);
            }
            this.InvokeAsync("HasAnyOpenJournalLineApprovalEntries", new object[] {
                        journalTemplateName,
                        journalBatchName}, this.HasAnyOpenJournalLineApprovalEntriesOperationCompleted, userState);
        }
        
        private void OnHasAnyOpenJournalLineApprovalEntriesOperationCompleted(object arg) {
            if ((this.HasAnyOpenJournalLineApprovalEntriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasAnyOpenJournalLineApprovalEntriesCompleted(this, new HasAnyOpenJournalLineApprovalEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:RenameApprovalEntries", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="RenameApprovalEntries_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RenameApprovalEntries(string oldRecordId, string newRecordId) {
            this.Invoke("RenameApprovalEntries", new object[] {
                        oldRecordId,
                        newRecordId});
        }
        
        /// <remarks/>
        public void RenameApprovalEntriesAsync(string oldRecordId, string newRecordId) {
            this.RenameApprovalEntriesAsync(oldRecordId, newRecordId, null);
        }
        
        /// <remarks/>
        public void RenameApprovalEntriesAsync(string oldRecordId, string newRecordId, object userState) {
            if ((this.RenameApprovalEntriesOperationCompleted == null)) {
                this.RenameApprovalEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameApprovalEntriesOperationCompleted);
            }
            this.InvokeAsync("RenameApprovalEntries", new object[] {
                        oldRecordId,
                        newRecordId}, this.RenameApprovalEntriesOperationCompleted, userState);
        }
        
        private void OnRenameApprovalEntriesOperationCompleted(object arg) {
            if ((this.RenameApprovalEntriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameApprovalEntriesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt:DeleteApprovalEntries", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", ResponseElementName="DeleteApprovalEntries_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Approvals_Mgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteApprovalEntries(string recordIDToApprove) {
            this.Invoke("DeleteApprovalEntries", new object[] {
                        recordIDToApprove});
        }
        
        /// <remarks/>
        public void DeleteApprovalEntriesAsync(string recordIDToApprove) {
            this.DeleteApprovalEntriesAsync(recordIDToApprove, null);
        }
        
        /// <remarks/>
        public void DeleteApprovalEntriesAsync(string recordIDToApprove, object userState) {
            if ((this.DeleteApprovalEntriesOperationCompleted == null)) {
                this.DeleteApprovalEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteApprovalEntriesOperationCompleted);
            }
            this.InvokeAsync("DeleteApprovalEntries", new object[] {
                        recordIDToApprove}, this.DeleteApprovalEntriesOperationCompleted, userState);
        }
        
        private void OnDeleteApprovalEntriesOperationCompleted(object arg) {
            if ((this.DeleteApprovalEntriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteApprovalEntriesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CopyApprovalEntryQuoteToOrderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void OpenApprovalEntriesPageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CanCancelApprovalForRecordCompletedEventHandler(object sender, CanCancelApprovalForRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CanCancelApprovalForRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CanCancelApprovalForRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void OnRenameRecordInApprovalRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void OnDeleteRecordInApprovalRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ApproveRecordApprovalRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void RejectRecordApprovalRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DelegateRecordApprovalRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void IsOverdueNotificationsWorkflowEnabledCompletedEventHandler(object sender, IsOverdueNotificationsWorkflowEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsOverdueNotificationsWorkflowEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsOverdueNotificationsWorkflowEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void PostApprovalEntriesCompletedEventHandler(object sender, PostApprovalEntriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostApprovalEntriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostApprovalEntriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ShowPostedApprovalEntriesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DeletePostedApprovalEntriesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void HasOpenApprovalEntriesForCurrentUserCompletedEventHandler(object sender, HasOpenApprovalEntriesForCurrentUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasOpenApprovalEntriesForCurrentUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasOpenApprovalEntriesForCurrentUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void HasOpenApprovalEntriesCompletedEventHandler(object sender, HasOpenApprovalEntriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasOpenApprovalEntriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasOpenApprovalEntriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void HasOpenOrPendingApprovalEntriesCompletedEventHandler(object sender, HasOpenOrPendingApprovalEntriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasOpenOrPendingApprovalEntriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasOpenOrPendingApprovalEntriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void HasApprovalEntriesCompletedEventHandler(object sender, HasApprovalEntriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasApprovalEntriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasApprovalEntriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void HasAnyOpenJournalLineApprovalEntriesCompletedEventHandler(object sender, HasAnyOpenJournalLineApprovalEntriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasAnyOpenJournalLineApprovalEntriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasAnyOpenJournalLineApprovalEntriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void RenameApprovalEntriesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DeleteApprovalEntriesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591