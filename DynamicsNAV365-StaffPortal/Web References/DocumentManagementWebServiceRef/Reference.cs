//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace DynamicsNAV365_StaffPortal.DocumentManagementWebServiceRef {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DocumentMgmt_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt")]
    public partial class DocumentMgmt : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InsertNewDocumentEntryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifySystemFileURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyCustomerSystemFileURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyDocumentEntryFileURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDocumentAttachedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPortalDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPortalDocumentByDocCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertLeaveApplicationDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLeaveApplicationDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateSupportingDocumentLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateSupportingDocumentLinkCopyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetERPPUserManualsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileToSharePointAndNAVOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertImprestAttachmentOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DocumentMgmt() {
            this.Url = "http://cihebsvr.cihebk.local:7047/CIHEBK/WS/CIHEBKENYA/Codeunit/DocumentMgmt";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InsertNewDocumentEntryCompletedEventHandler InsertNewDocumentEntryCompleted;
        
        /// <remarks/>
        public event ModifySystemFileURLCompletedEventHandler ModifySystemFileURLCompleted;
        
        /// <remarks/>
        public event ModifyCustomerSystemFileURLCompletedEventHandler ModifyCustomerSystemFileURLCompleted;
        
        /// <remarks/>
        public event ModifyDocumentEntryFileURLCompletedEventHandler ModifyDocumentEntryFileURLCompleted;
        
        /// <remarks/>
        public event CheckDocumentAttachedCompletedEventHandler CheckDocumentAttachedCompleted;
        
        /// <remarks/>
        public event GetPortalDocumentsCompletedEventHandler GetPortalDocumentsCompleted;
        
        /// <remarks/>
        public event GetPortalDocumentByDocCodeCompletedEventHandler GetPortalDocumentByDocCodeCompleted;
        
        /// <remarks/>
        public event InsertLeaveApplicationDocumentCompletedEventHandler InsertLeaveApplicationDocumentCompleted;
        
        /// <remarks/>
        public event GetLeaveApplicationDocumentCompletedEventHandler GetLeaveApplicationDocumentCompleted;
        
        /// <remarks/>
        public event GenerateSupportingDocumentLinkCompletedEventHandler GenerateSupportingDocumentLinkCompleted;
        
        /// <remarks/>
        public event GenerateSupportingDocumentLinkCopyCompletedEventHandler GenerateSupportingDocumentLinkCopyCompleted;
        
        /// <remarks/>
        public event GetERPPUserManualsCompletedEventHandler GetERPPUserManualsCompleted;
        
        /// <remarks/>
        public event UploadFileToSharePointAndNAVCompletedEventHandler UploadFileToSharePointAndNAVCompleted;
        
        /// <remarks/>
        public event InsertImprestAttachmentCompletedEventHandler InsertImprestAttachmentCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt:InsertNewDocumentEntry", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", ResponseElementName="InsertNewDocumentEntry_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool InsertNewDocumentEntry(string documentNoa46, string documentCode, string documentDescription, string localFilePath) {
            object[] results = this.Invoke("InsertNewDocumentEntry", new object[] {
                        documentNoa46,
                        documentCode,
                        documentDescription,
                        localFilePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertNewDocumentEntryAsync(string documentNoa46, string documentCode, string documentDescription, string localFilePath) {
            this.InsertNewDocumentEntryAsync(documentNoa46, documentCode, documentDescription, localFilePath, null);
        }
        
        /// <remarks/>
        public void InsertNewDocumentEntryAsync(string documentNoa46, string documentCode, string documentDescription, string localFilePath, object userState) {
            if ((this.InsertNewDocumentEntryOperationCompleted == null)) {
                this.InsertNewDocumentEntryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertNewDocumentEntryOperationCompleted);
            }
            this.InvokeAsync("InsertNewDocumentEntry", new object[] {
                        documentNoa46,
                        documentCode,
                        documentDescription,
                        localFilePath}, this.InsertNewDocumentEntryOperationCompleted, userState);
        }
        
        private void OnInsertNewDocumentEntryOperationCompleted(object arg) {
            if ((this.InsertNewDocumentEntryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertNewDocumentEntryCompleted(this, new InsertNewDocumentEntryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt:ModifySystemFileURL", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", ResponseElementName="ModifySystemFileURL_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ModifySystemFileURL(string documentNoa46, string documentCode, string localURL) {
            this.Invoke("ModifySystemFileURL", new object[] {
                        documentNoa46,
                        documentCode,
                        localURL});
        }
        
        /// <remarks/>
        public void ModifySystemFileURLAsync(string documentNoa46, string documentCode, string localURL) {
            this.ModifySystemFileURLAsync(documentNoa46, documentCode, localURL, null);
        }
        
        /// <remarks/>
        public void ModifySystemFileURLAsync(string documentNoa46, string documentCode, string localURL, object userState) {
            if ((this.ModifySystemFileURLOperationCompleted == null)) {
                this.ModifySystemFileURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifySystemFileURLOperationCompleted);
            }
            this.InvokeAsync("ModifySystemFileURL", new object[] {
                        documentNoa46,
                        documentCode,
                        localURL}, this.ModifySystemFileURLOperationCompleted, userState);
        }
        
        private void OnModifySystemFileURLOperationCompleted(object arg) {
            if ((this.ModifySystemFileURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifySystemFileURLCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt:ModifyCustomerSystemFileURL", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", ResponseElementName="ModifyCustomerSystemFileURL_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ModifyCustomerSystemFileURL(string documentNoa46, string documentCode, string localURL) {
            this.Invoke("ModifyCustomerSystemFileURL", new object[] {
                        documentNoa46,
                        documentCode,
                        localURL});
        }
        
        /// <remarks/>
        public void ModifyCustomerSystemFileURLAsync(string documentNoa46, string documentCode, string localURL) {
            this.ModifyCustomerSystemFileURLAsync(documentNoa46, documentCode, localURL, null);
        }
        
        /// <remarks/>
        public void ModifyCustomerSystemFileURLAsync(string documentNoa46, string documentCode, string localURL, object userState) {
            if ((this.ModifyCustomerSystemFileURLOperationCompleted == null)) {
                this.ModifyCustomerSystemFileURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyCustomerSystemFileURLOperationCompleted);
            }
            this.InvokeAsync("ModifyCustomerSystemFileURL", new object[] {
                        documentNoa46,
                        documentCode,
                        localURL}, this.ModifyCustomerSystemFileURLOperationCompleted, userState);
        }
        
        private void OnModifyCustomerSystemFileURLOperationCompleted(object arg) {
            if ((this.ModifyCustomerSystemFileURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyCustomerSystemFileURLCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt:ModifyDocumentEntryFileURL", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", ResponseElementName="ModifyDocumentEntryFileURL_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool ModifyDocumentEntryFileURL(string documentNoa46, string documentCode, string localURL) {
            object[] results = this.Invoke("ModifyDocumentEntryFileURL", new object[] {
                        documentNoa46,
                        documentCode,
                        localURL});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyDocumentEntryFileURLAsync(string documentNoa46, string documentCode, string localURL) {
            this.ModifyDocumentEntryFileURLAsync(documentNoa46, documentCode, localURL, null);
        }
        
        /// <remarks/>
        public void ModifyDocumentEntryFileURLAsync(string documentNoa46, string documentCode, string localURL, object userState) {
            if ((this.ModifyDocumentEntryFileURLOperationCompleted == null)) {
                this.ModifyDocumentEntryFileURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyDocumentEntryFileURLOperationCompleted);
            }
            this.InvokeAsync("ModifyDocumentEntryFileURL", new object[] {
                        documentNoa46,
                        documentCode,
                        localURL}, this.ModifyDocumentEntryFileURLOperationCompleted, userState);
        }
        
        private void OnModifyDocumentEntryFileURLOperationCompleted(object arg) {
            if ((this.ModifyDocumentEntryFileURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyDocumentEntryFileURLCompleted(this, new ModifyDocumentEntryFileURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt:CheckDocumentAttached", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", ResponseElementName="CheckDocumentAttached_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool CheckDocumentAttached(string documentNoa46) {
            object[] results = this.Invoke("CheckDocumentAttached", new object[] {
                        documentNoa46});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckDocumentAttachedAsync(string documentNoa46) {
            this.CheckDocumentAttachedAsync(documentNoa46, null);
        }
        
        /// <remarks/>
        public void CheckDocumentAttachedAsync(string documentNoa46, object userState) {
            if ((this.CheckDocumentAttachedOperationCompleted == null)) {
                this.CheckDocumentAttachedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDocumentAttachedOperationCompleted);
            }
            this.InvokeAsync("CheckDocumentAttached", new object[] {
                        documentNoa46}, this.CheckDocumentAttachedOperationCompleted, userState);
        }
        
        private void OnCheckDocumentAttachedOperationCompleted(object arg) {
            if ((this.CheckDocumentAttachedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDocumentAttachedCompleted(this, new CheckDocumentAttachedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt:GetPortalDocuments", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", ResponseElementName="GetPortalDocuments_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string GetPortalDocuments(string documentNo) {
            object[] results = this.Invoke("GetPortalDocuments", new object[] {
                        documentNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPortalDocumentsAsync(string documentNo) {
            this.GetPortalDocumentsAsync(documentNo, null);
        }
        
        /// <remarks/>
        public void GetPortalDocumentsAsync(string documentNo, object userState) {
            if ((this.GetPortalDocumentsOperationCompleted == null)) {
                this.GetPortalDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPortalDocumentsOperationCompleted);
            }
            this.InvokeAsync("GetPortalDocuments", new object[] {
                        documentNo}, this.GetPortalDocumentsOperationCompleted, userState);
        }
        
        private void OnGetPortalDocumentsOperationCompleted(object arg) {
            if ((this.GetPortalDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPortalDocumentsCompleted(this, new GetPortalDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt:GetPortalDocumentByDocCode", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", ResponseElementName="GetPortalDocumentByDocCode_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string GetPortalDocumentByDocCode(int lineNo, string documentNo, string documentCode) {
            object[] results = this.Invoke("GetPortalDocumentByDocCode", new object[] {
                        lineNo,
                        documentNo,
                        documentCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPortalDocumentByDocCodeAsync(int lineNo, string documentNo, string documentCode) {
            this.GetPortalDocumentByDocCodeAsync(lineNo, documentNo, documentCode, null);
        }
        
        /// <remarks/>
        public void GetPortalDocumentByDocCodeAsync(int lineNo, string documentNo, string documentCode, object userState) {
            if ((this.GetPortalDocumentByDocCodeOperationCompleted == null)) {
                this.GetPortalDocumentByDocCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPortalDocumentByDocCodeOperationCompleted);
            }
            this.InvokeAsync("GetPortalDocumentByDocCode", new object[] {
                        lineNo,
                        documentNo,
                        documentCode}, this.GetPortalDocumentByDocCodeOperationCompleted, userState);
        }
        
        private void OnGetPortalDocumentByDocCodeOperationCompleted(object arg) {
            if ((this.GetPortalDocumentByDocCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPortalDocumentByDocCodeCompleted(this, new GetPortalDocumentByDocCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt:InsertLeaveApplicationDocume" +
            "nt", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", ResponseElementName="InsertLeaveApplicationDocument_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool InsertLeaveApplicationDocument(string documentNo, string leaveType) {
            object[] results = this.Invoke("InsertLeaveApplicationDocument", new object[] {
                        documentNo,
                        leaveType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertLeaveApplicationDocumentAsync(string documentNo, string leaveType) {
            this.InsertLeaveApplicationDocumentAsync(documentNo, leaveType, null);
        }
        
        /// <remarks/>
        public void InsertLeaveApplicationDocumentAsync(string documentNo, string leaveType, object userState) {
            if ((this.InsertLeaveApplicationDocumentOperationCompleted == null)) {
                this.InsertLeaveApplicationDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertLeaveApplicationDocumentOperationCompleted);
            }
            this.InvokeAsync("InsertLeaveApplicationDocument", new object[] {
                        documentNo,
                        leaveType}, this.InsertLeaveApplicationDocumentOperationCompleted, userState);
        }
        
        private void OnInsertLeaveApplicationDocumentOperationCompleted(object arg) {
            if ((this.InsertLeaveApplicationDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertLeaveApplicationDocumentCompleted(this, new InsertLeaveApplicationDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt:GetLeaveApplicationDocument", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", ResponseElementName="GetLeaveApplicationDocument_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string GetLeaveApplicationDocument(string documentNo, string documentCode) {
            object[] results = this.Invoke("GetLeaveApplicationDocument", new object[] {
                        documentNo,
                        documentCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLeaveApplicationDocumentAsync(string documentNo, string documentCode) {
            this.GetLeaveApplicationDocumentAsync(documentNo, documentCode, null);
        }
        
        /// <remarks/>
        public void GetLeaveApplicationDocumentAsync(string documentNo, string documentCode, object userState) {
            if ((this.GetLeaveApplicationDocumentOperationCompleted == null)) {
                this.GetLeaveApplicationDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLeaveApplicationDocumentOperationCompleted);
            }
            this.InvokeAsync("GetLeaveApplicationDocument", new object[] {
                        documentNo,
                        documentCode}, this.GetLeaveApplicationDocumentOperationCompleted, userState);
        }
        
        private void OnGetLeaveApplicationDocumentOperationCompleted(object arg) {
            if ((this.GetLeaveApplicationDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLeaveApplicationDocumentCompleted(this, new GetLeaveApplicationDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt:GenerateSupportingDocumentLi" +
            "nk", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", ResponseElementName="GenerateSupportingDocumentLink_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string GenerateSupportingDocumentLink(string documentNo) {
            object[] results = this.Invoke("GenerateSupportingDocumentLink", new object[] {
                        documentNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateSupportingDocumentLinkAsync(string documentNo) {
            this.GenerateSupportingDocumentLinkAsync(documentNo, null);
        }
        
        /// <remarks/>
        public void GenerateSupportingDocumentLinkAsync(string documentNo, object userState) {
            if ((this.GenerateSupportingDocumentLinkOperationCompleted == null)) {
                this.GenerateSupportingDocumentLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateSupportingDocumentLinkOperationCompleted);
            }
            this.InvokeAsync("GenerateSupportingDocumentLink", new object[] {
                        documentNo}, this.GenerateSupportingDocumentLinkOperationCompleted, userState);
        }
        
        private void OnGenerateSupportingDocumentLinkOperationCompleted(object arg) {
            if ((this.GenerateSupportingDocumentLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateSupportingDocumentLinkCompleted(this, new GenerateSupportingDocumentLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt:GenerateSupportingDocumentLi" +
            "nkCopy", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", ResponseElementName="GenerateSupportingDocumentLinkCopy_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string GenerateSupportingDocumentLinkCopy(string documentNo) {
            object[] results = this.Invoke("GenerateSupportingDocumentLinkCopy", new object[] {
                        documentNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateSupportingDocumentLinkCopyAsync(string documentNo) {
            this.GenerateSupportingDocumentLinkCopyAsync(documentNo, null);
        }
        
        /// <remarks/>
        public void GenerateSupportingDocumentLinkCopyAsync(string documentNo, object userState) {
            if ((this.GenerateSupportingDocumentLinkCopyOperationCompleted == null)) {
                this.GenerateSupportingDocumentLinkCopyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateSupportingDocumentLinkCopyOperationCompleted);
            }
            this.InvokeAsync("GenerateSupportingDocumentLinkCopy", new object[] {
                        documentNo}, this.GenerateSupportingDocumentLinkCopyOperationCompleted, userState);
        }
        
        private void OnGenerateSupportingDocumentLinkCopyOperationCompleted(object arg) {
            if ((this.GenerateSupportingDocumentLinkCopyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateSupportingDocumentLinkCopyCompleted(this, new GenerateSupportingDocumentLinkCopyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt:GetERPPUserManuals", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", ResponseElementName="GetERPPUserManuals_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string GetERPPUserManuals() {
            object[] results = this.Invoke("GetERPPUserManuals", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetERPPUserManualsAsync() {
            this.GetERPPUserManualsAsync(null);
        }
        
        /// <remarks/>
        public void GetERPPUserManualsAsync(object userState) {
            if ((this.GetERPPUserManualsOperationCompleted == null)) {
                this.GetERPPUserManualsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetERPPUserManualsOperationCompleted);
            }
            this.InvokeAsync("GetERPPUserManuals", new object[0], this.GetERPPUserManualsOperationCompleted, userState);
        }
        
        private void OnGetERPPUserManualsOperationCompleted(object arg) {
            if ((this.GetERPPUserManualsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetERPPUserManualsCompleted(this, new GetERPPUserManualsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt:UploadFileToSharePointAndNAV" +
            "", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", ResponseElementName="UploadFileToSharePointAndNAV_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool UploadFileToSharePointAndNAV(string documentNoa46, string documentCode, string localURL, string sharePointUrl) {
            object[] results = this.Invoke("UploadFileToSharePointAndNAV", new object[] {
                        documentNoa46,
                        documentCode,
                        localURL,
                        sharePointUrl});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileToSharePointAndNAVAsync(string documentNoa46, string documentCode, string localURL, string sharePointUrl) {
            this.UploadFileToSharePointAndNAVAsync(documentNoa46, documentCode, localURL, sharePointUrl, null);
        }
        
        /// <remarks/>
        public void UploadFileToSharePointAndNAVAsync(string documentNoa46, string documentCode, string localURL, string sharePointUrl, object userState) {
            if ((this.UploadFileToSharePointAndNAVOperationCompleted == null)) {
                this.UploadFileToSharePointAndNAVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileToSharePointAndNAVOperationCompleted);
            }
            this.InvokeAsync("UploadFileToSharePointAndNAV", new object[] {
                        documentNoa46,
                        documentCode,
                        localURL,
                        sharePointUrl}, this.UploadFileToSharePointAndNAVOperationCompleted, userState);
        }
        
        private void OnUploadFileToSharePointAndNAVOperationCompleted(object arg) {
            if ((this.UploadFileToSharePointAndNAVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileToSharePointAndNAVCompleted(this, new UploadFileToSharePointAndNAVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt:InsertImprestAttachment", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", ResponseElementName="InsertImprestAttachment_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/DocumentMgmt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool InsertImprestAttachment(string documentNo, string linkUrl, int tableID, string docDescription) {
            object[] results = this.Invoke("InsertImprestAttachment", new object[] {
                        documentNo,
                        linkUrl,
                        tableID,
                        docDescription});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertImprestAttachmentAsync(string documentNo, string linkUrl, int tableID, string docDescription) {
            this.InsertImprestAttachmentAsync(documentNo, linkUrl, tableID, docDescription, null);
        }
        
        /// <remarks/>
        public void InsertImprestAttachmentAsync(string documentNo, string linkUrl, int tableID, string docDescription, object userState) {
            if ((this.InsertImprestAttachmentOperationCompleted == null)) {
                this.InsertImprestAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertImprestAttachmentOperationCompleted);
            }
            this.InvokeAsync("InsertImprestAttachment", new object[] {
                        documentNo,
                        linkUrl,
                        tableID,
                        docDescription}, this.InsertImprestAttachmentOperationCompleted, userState);
        }
        
        private void OnInsertImprestAttachmentOperationCompleted(object arg) {
            if ((this.InsertImprestAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertImprestAttachmentCompleted(this, new InsertImprestAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertNewDocumentEntryCompletedEventHandler(object sender, InsertNewDocumentEntryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertNewDocumentEntryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertNewDocumentEntryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ModifySystemFileURLCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ModifyCustomerSystemFileURLCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ModifyDocumentEntryFileURLCompletedEventHandler(object sender, ModifyDocumentEntryFileURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyDocumentEntryFileURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyDocumentEntryFileURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckDocumentAttachedCompletedEventHandler(object sender, CheckDocumentAttachedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDocumentAttachedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDocumentAttachedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPortalDocumentsCompletedEventHandler(object sender, GetPortalDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPortalDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPortalDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPortalDocumentByDocCodeCompletedEventHandler(object sender, GetPortalDocumentByDocCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPortalDocumentByDocCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPortalDocumentByDocCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertLeaveApplicationDocumentCompletedEventHandler(object sender, InsertLeaveApplicationDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertLeaveApplicationDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertLeaveApplicationDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetLeaveApplicationDocumentCompletedEventHandler(object sender, GetLeaveApplicationDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLeaveApplicationDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLeaveApplicationDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GenerateSupportingDocumentLinkCompletedEventHandler(object sender, GenerateSupportingDocumentLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateSupportingDocumentLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateSupportingDocumentLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GenerateSupportingDocumentLinkCopyCompletedEventHandler(object sender, GenerateSupportingDocumentLinkCopyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateSupportingDocumentLinkCopyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateSupportingDocumentLinkCopyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetERPPUserManualsCompletedEventHandler(object sender, GetERPPUserManualsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetERPPUserManualsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetERPPUserManualsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadFileToSharePointAndNAVCompletedEventHandler(object sender, UploadFileToSharePointAndNAVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileToSharePointAndNAVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileToSharePointAndNAVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertImprestAttachmentCompletedEventHandler(object sender, InsertImprestAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertImprestAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertImprestAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591