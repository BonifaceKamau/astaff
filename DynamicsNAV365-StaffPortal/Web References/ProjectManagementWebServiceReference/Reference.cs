//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace DynamicsNAV365_StaffPortal.ProjectManagementWebServiceReference {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ProjectManagementWS_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS")]
    public partial class ProjectManagementWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ModifyProjectBenefitOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteBenefitLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddProjectBenefitOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddProjectRiskOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteRiskLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyProjectRiskOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddProjectTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback ManagerEditTaskLinesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTaskManagerLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback MemberEditTaskLinesOperationCompleted;
        
        private System.Threading.SendOrPostCallback BeginProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTasksDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAttachedLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateProjectPlanHeaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPlanActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyProjectPlanActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePlanActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendProjectPlanApprovalOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddClosureProjectOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ProjectManagementWS() {
            this.Url = "http://cihebsvr.cihebk.local:7047/CIHEBK/WS/CIHEBKENYA/Codeunit/ProjectManagement" +
                "WS";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ModifyProjectBenefitCompletedEventHandler ModifyProjectBenefitCompleted;
        
        /// <remarks/>
        public event DeleteBenefitLineCompletedEventHandler DeleteBenefitLineCompleted;
        
        /// <remarks/>
        public event AddProjectBenefitCompletedEventHandler AddProjectBenefitCompleted;
        
        /// <remarks/>
        public event AddProjectRiskCompletedEventHandler AddProjectRiskCompleted;
        
        /// <remarks/>
        public event DeleteRiskLineCompletedEventHandler DeleteRiskLineCompleted;
        
        /// <remarks/>
        public event ModifyProjectRiskCompletedEventHandler ModifyProjectRiskCompleted;
        
        /// <remarks/>
        public event AddProjectTaskCompletedEventHandler AddProjectTaskCompleted;
        
        /// <remarks/>
        public event ManagerEditTaskLinesCompletedEventHandler ManagerEditTaskLinesCompleted;
        
        /// <remarks/>
        public event DeleteTaskManagerLineCompletedEventHandler DeleteTaskManagerLineCompleted;
        
        /// <remarks/>
        public event MemberEditTaskLinesCompletedEventHandler MemberEditTaskLinesCompleted;
        
        /// <remarks/>
        public event BeginProjectCompletedEventHandler BeginProjectCompleted;
        
        /// <remarks/>
        public event CompleteProjectCompletedEventHandler CompleteProjectCompleted;
        
        /// <remarks/>
        public event CancelProjectCompletedEventHandler CancelProjectCompleted;
        
        /// <remarks/>
        public event UploadTasksDocumentCompletedEventHandler UploadTasksDocumentCompleted;
        
        /// <remarks/>
        public event DeleteAttachedLinksCompletedEventHandler DeleteAttachedLinksCompleted;
        
        /// <remarks/>
        public event CreateProjectPlanHeaderCompletedEventHandler CreateProjectPlanHeaderCompleted;
        
        /// <remarks/>
        public event AddPlanActivityCompletedEventHandler AddPlanActivityCompleted;
        
        /// <remarks/>
        public event ModifyProjectPlanActivityCompletedEventHandler ModifyProjectPlanActivityCompleted;
        
        /// <remarks/>
        public event DeletePlanActivityCompletedEventHandler DeletePlanActivityCompleted;
        
        /// <remarks/>
        public event SendProjectPlanApprovalCompletedEventHandler SendProjectPlanApprovalCompleted;
        
        /// <remarks/>
        public event AddClosureProjectCompletedEventHandler AddClosureProjectCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:ModifyProjectBenefit", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="ModifyProjectBenefit_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool ModifyProjectBenefit(
                    string projectNo, 
                    string benefit, 
                    string objectiveSupported, 
                    string benefitOwner, 
                    string beneficiariesText, 
                    string kPIText, 
                    string measureText, 
                    string frequencyText, 
                    int lineNo, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime baselineDate, 
                    string realizationStatus, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime actualRealizationDate, 
                    string targetValue, 
                    string assumptions, 
                    string benefitRisk, 
                    string notes) {
            object[] results = this.Invoke("ModifyProjectBenefit", new object[] {
                        projectNo,
                        benefit,
                        objectiveSupported,
                        benefitOwner,
                        beneficiariesText,
                        kPIText,
                        measureText,
                        frequencyText,
                        lineNo,
                        baselineDate,
                        realizationStatus,
                        actualRealizationDate,
                        targetValue,
                        assumptions,
                        benefitRisk,
                        notes});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyProjectBenefitAsync(
                    string projectNo, 
                    string benefit, 
                    string objectiveSupported, 
                    string benefitOwner, 
                    string beneficiariesText, 
                    string kPIText, 
                    string measureText, 
                    string frequencyText, 
                    int lineNo, 
                    System.DateTime baselineDate, 
                    string realizationStatus, 
                    System.DateTime actualRealizationDate, 
                    string targetValue, 
                    string assumptions, 
                    string benefitRisk, 
                    string notes) {
            this.ModifyProjectBenefitAsync(projectNo, benefit, objectiveSupported, benefitOwner, beneficiariesText, kPIText, measureText, frequencyText, lineNo, baselineDate, realizationStatus, actualRealizationDate, targetValue, assumptions, benefitRisk, notes, null);
        }
        
        /// <remarks/>
        public void ModifyProjectBenefitAsync(
                    string projectNo, 
                    string benefit, 
                    string objectiveSupported, 
                    string benefitOwner, 
                    string beneficiariesText, 
                    string kPIText, 
                    string measureText, 
                    string frequencyText, 
                    int lineNo, 
                    System.DateTime baselineDate, 
                    string realizationStatus, 
                    System.DateTime actualRealizationDate, 
                    string targetValue, 
                    string assumptions, 
                    string benefitRisk, 
                    string notes, 
                    object userState) {
            if ((this.ModifyProjectBenefitOperationCompleted == null)) {
                this.ModifyProjectBenefitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyProjectBenefitOperationCompleted);
            }
            this.InvokeAsync("ModifyProjectBenefit", new object[] {
                        projectNo,
                        benefit,
                        objectiveSupported,
                        benefitOwner,
                        beneficiariesText,
                        kPIText,
                        measureText,
                        frequencyText,
                        lineNo,
                        baselineDate,
                        realizationStatus,
                        actualRealizationDate,
                        targetValue,
                        assumptions,
                        benefitRisk,
                        notes}, this.ModifyProjectBenefitOperationCompleted, userState);
        }
        
        private void OnModifyProjectBenefitOperationCompleted(object arg) {
            if ((this.ModifyProjectBenefitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyProjectBenefitCompleted(this, new ModifyProjectBenefitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:DeleteBenefitLine", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="DeleteBenefitLine_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool DeleteBenefitLine(int lineNo) {
            object[] results = this.Invoke("DeleteBenefitLine", new object[] {
                        lineNo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteBenefitLineAsync(int lineNo) {
            this.DeleteBenefitLineAsync(lineNo, null);
        }
        
        /// <remarks/>
        public void DeleteBenefitLineAsync(int lineNo, object userState) {
            if ((this.DeleteBenefitLineOperationCompleted == null)) {
                this.DeleteBenefitLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteBenefitLineOperationCompleted);
            }
            this.InvokeAsync("DeleteBenefitLine", new object[] {
                        lineNo}, this.DeleteBenefitLineOperationCompleted, userState);
        }
        
        private void OnDeleteBenefitLineOperationCompleted(object arg) {
            if ((this.DeleteBenefitLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteBenefitLineCompleted(this, new DeleteBenefitLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:AddProjectBenefit", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="AddProjectBenefit_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool AddProjectBenefit(string projectNo, string benefit, string objectiveSupported, string benefitOwner, string beneficiaries, string kPI, string measure, string frequency, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime baselineDate, string realizationStatus, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime actualRealizationDate, string targetValue, string assumptions, string benefitRisk, string notes) {
            object[] results = this.Invoke("AddProjectBenefit", new object[] {
                        projectNo,
                        benefit,
                        objectiveSupported,
                        benefitOwner,
                        beneficiaries,
                        kPI,
                        measure,
                        frequency,
                        baselineDate,
                        realizationStatus,
                        actualRealizationDate,
                        targetValue,
                        assumptions,
                        benefitRisk,
                        notes});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddProjectBenefitAsync(string projectNo, string benefit, string objectiveSupported, string benefitOwner, string beneficiaries, string kPI, string measure, string frequency, System.DateTime baselineDate, string realizationStatus, System.DateTime actualRealizationDate, string targetValue, string assumptions, string benefitRisk, string notes) {
            this.AddProjectBenefitAsync(projectNo, benefit, objectiveSupported, benefitOwner, beneficiaries, kPI, measure, frequency, baselineDate, realizationStatus, actualRealizationDate, targetValue, assumptions, benefitRisk, notes, null);
        }
        
        /// <remarks/>
        public void AddProjectBenefitAsync(
                    string projectNo, 
                    string benefit, 
                    string objectiveSupported, 
                    string benefitOwner, 
                    string beneficiaries, 
                    string kPI, 
                    string measure, 
                    string frequency, 
                    System.DateTime baselineDate, 
                    string realizationStatus, 
                    System.DateTime actualRealizationDate, 
                    string targetValue, 
                    string assumptions, 
                    string benefitRisk, 
                    string notes, 
                    object userState) {
            if ((this.AddProjectBenefitOperationCompleted == null)) {
                this.AddProjectBenefitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddProjectBenefitOperationCompleted);
            }
            this.InvokeAsync("AddProjectBenefit", new object[] {
                        projectNo,
                        benefit,
                        objectiveSupported,
                        benefitOwner,
                        beneficiaries,
                        kPI,
                        measure,
                        frequency,
                        baselineDate,
                        realizationStatus,
                        actualRealizationDate,
                        targetValue,
                        assumptions,
                        benefitRisk,
                        notes}, this.AddProjectBenefitOperationCompleted, userState);
        }
        
        private void OnAddProjectBenefitOperationCompleted(object arg) {
            if ((this.AddProjectBenefitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddProjectBenefitCompleted(this, new AddProjectBenefitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:AddProjectRisk", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="AddProjectRisk_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool AddProjectRisk(string projectNo, string riskDescription, string impactDescription, int impactLevel, int probabilityLevel, string mitigationNotes, string ownerName, string objectiveRelated, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime riskStartDate, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime riskEndDate) {
            object[] results = this.Invoke("AddProjectRisk", new object[] {
                        projectNo,
                        riskDescription,
                        impactDescription,
                        impactLevel,
                        probabilityLevel,
                        mitigationNotes,
                        ownerName,
                        objectiveRelated,
                        riskStartDate,
                        riskEndDate});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddProjectRiskAsync(string projectNo, string riskDescription, string impactDescription, int impactLevel, int probabilityLevel, string mitigationNotes, string ownerName, string objectiveRelated, System.DateTime riskStartDate, System.DateTime riskEndDate) {
            this.AddProjectRiskAsync(projectNo, riskDescription, impactDescription, impactLevel, probabilityLevel, mitigationNotes, ownerName, objectiveRelated, riskStartDate, riskEndDate, null);
        }
        
        /// <remarks/>
        public void AddProjectRiskAsync(string projectNo, string riskDescription, string impactDescription, int impactLevel, int probabilityLevel, string mitigationNotes, string ownerName, string objectiveRelated, System.DateTime riskStartDate, System.DateTime riskEndDate, object userState) {
            if ((this.AddProjectRiskOperationCompleted == null)) {
                this.AddProjectRiskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddProjectRiskOperationCompleted);
            }
            this.InvokeAsync("AddProjectRisk", new object[] {
                        projectNo,
                        riskDescription,
                        impactDescription,
                        impactLevel,
                        probabilityLevel,
                        mitigationNotes,
                        ownerName,
                        objectiveRelated,
                        riskStartDate,
                        riskEndDate}, this.AddProjectRiskOperationCompleted, userState);
        }
        
        private void OnAddProjectRiskOperationCompleted(object arg) {
            if ((this.AddProjectRiskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddProjectRiskCompleted(this, new AddProjectRiskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:DeleteRiskLine", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="DeleteRiskLine_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool DeleteRiskLine(int lineNo) {
            object[] results = this.Invoke("DeleteRiskLine", new object[] {
                        lineNo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteRiskLineAsync(int lineNo) {
            this.DeleteRiskLineAsync(lineNo, null);
        }
        
        /// <remarks/>
        public void DeleteRiskLineAsync(int lineNo, object userState) {
            if ((this.DeleteRiskLineOperationCompleted == null)) {
                this.DeleteRiskLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRiskLineOperationCompleted);
            }
            this.InvokeAsync("DeleteRiskLine", new object[] {
                        lineNo}, this.DeleteRiskLineOperationCompleted, userState);
        }
        
        private void OnDeleteRiskLineOperationCompleted(object arg) {
            if ((this.DeleteRiskLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRiskLineCompleted(this, new DeleteRiskLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:ModifyProjectRisk", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="ModifyProjectRisk_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool ModifyProjectRisk(int lineNo, string projectCode, string riskDescription, string impactDescription, int impactLevel, int probabilityLevel, string mitigationNotes, string ownerName, string objectiveRelated, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime riskStartDate, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime riskEndDate) {
            object[] results = this.Invoke("ModifyProjectRisk", new object[] {
                        lineNo,
                        projectCode,
                        riskDescription,
                        impactDescription,
                        impactLevel,
                        probabilityLevel,
                        mitigationNotes,
                        ownerName,
                        objectiveRelated,
                        riskStartDate,
                        riskEndDate});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyProjectRiskAsync(int lineNo, string projectCode, string riskDescription, string impactDescription, int impactLevel, int probabilityLevel, string mitigationNotes, string ownerName, string objectiveRelated, System.DateTime riskStartDate, System.DateTime riskEndDate) {
            this.ModifyProjectRiskAsync(lineNo, projectCode, riskDescription, impactDescription, impactLevel, probabilityLevel, mitigationNotes, ownerName, objectiveRelated, riskStartDate, riskEndDate, null);
        }
        
        /// <remarks/>
        public void ModifyProjectRiskAsync(int lineNo, string projectCode, string riskDescription, string impactDescription, int impactLevel, int probabilityLevel, string mitigationNotes, string ownerName, string objectiveRelated, System.DateTime riskStartDate, System.DateTime riskEndDate, object userState) {
            if ((this.ModifyProjectRiskOperationCompleted == null)) {
                this.ModifyProjectRiskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyProjectRiskOperationCompleted);
            }
            this.InvokeAsync("ModifyProjectRisk", new object[] {
                        lineNo,
                        projectCode,
                        riskDescription,
                        impactDescription,
                        impactLevel,
                        probabilityLevel,
                        mitigationNotes,
                        ownerName,
                        objectiveRelated,
                        riskStartDate,
                        riskEndDate}, this.ModifyProjectRiskOperationCompleted, userState);
        }
        
        private void OnModifyProjectRiskOperationCompleted(object arg) {
            if ((this.ModifyProjectRiskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyProjectRiskCompleted(this, new ModifyProjectRiskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:AddProjectTask", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="AddProjectTask_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool AddProjectTask(string taskDescription, string assignedTo, string projectNo, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime expectedCompletioDate) {
            object[] results = this.Invoke("AddProjectTask", new object[] {
                        taskDescription,
                        assignedTo,
                        projectNo,
                        expectedCompletioDate});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddProjectTaskAsync(string taskDescription, string assignedTo, string projectNo, System.DateTime expectedCompletioDate) {
            this.AddProjectTaskAsync(taskDescription, assignedTo, projectNo, expectedCompletioDate, null);
        }
        
        /// <remarks/>
        public void AddProjectTaskAsync(string taskDescription, string assignedTo, string projectNo, System.DateTime expectedCompletioDate, object userState) {
            if ((this.AddProjectTaskOperationCompleted == null)) {
                this.AddProjectTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddProjectTaskOperationCompleted);
            }
            this.InvokeAsync("AddProjectTask", new object[] {
                        taskDescription,
                        assignedTo,
                        projectNo,
                        expectedCompletioDate}, this.AddProjectTaskOperationCompleted, userState);
        }
        
        private void OnAddProjectTaskOperationCompleted(object arg) {
            if ((this.AddProjectTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddProjectTaskCompleted(this, new AddProjectTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:ManagerEditTaskLines", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="ManagerEditTaskLines_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool ManagerEditTaskLines(int lineNo, bool confirmMarkComplete, string pMRemarks, string taskDescription) {
            object[] results = this.Invoke("ManagerEditTaskLines", new object[] {
                        lineNo,
                        confirmMarkComplete,
                        pMRemarks,
                        taskDescription});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ManagerEditTaskLinesAsync(int lineNo, bool confirmMarkComplete, string pMRemarks, string taskDescription) {
            this.ManagerEditTaskLinesAsync(lineNo, confirmMarkComplete, pMRemarks, taskDescription, null);
        }
        
        /// <remarks/>
        public void ManagerEditTaskLinesAsync(int lineNo, bool confirmMarkComplete, string pMRemarks, string taskDescription, object userState) {
            if ((this.ManagerEditTaskLinesOperationCompleted == null)) {
                this.ManagerEditTaskLinesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnManagerEditTaskLinesOperationCompleted);
            }
            this.InvokeAsync("ManagerEditTaskLines", new object[] {
                        lineNo,
                        confirmMarkComplete,
                        pMRemarks,
                        taskDescription}, this.ManagerEditTaskLinesOperationCompleted, userState);
        }
        
        private void OnManagerEditTaskLinesOperationCompleted(object arg) {
            if ((this.ManagerEditTaskLinesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ManagerEditTaskLinesCompleted(this, new ManagerEditTaskLinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:DeleteTaskManagerLine" +
            "", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="DeleteTaskManagerLine_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool DeleteTaskManagerLine(int lineNo) {
            object[] results = this.Invoke("DeleteTaskManagerLine", new object[] {
                        lineNo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTaskManagerLineAsync(int lineNo) {
            this.DeleteTaskManagerLineAsync(lineNo, null);
        }
        
        /// <remarks/>
        public void DeleteTaskManagerLineAsync(int lineNo, object userState) {
            if ((this.DeleteTaskManagerLineOperationCompleted == null)) {
                this.DeleteTaskManagerLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTaskManagerLineOperationCompleted);
            }
            this.InvokeAsync("DeleteTaskManagerLine", new object[] {
                        lineNo}, this.DeleteTaskManagerLineOperationCompleted, userState);
        }
        
        private void OnDeleteTaskManagerLineOperationCompleted(object arg) {
            if ((this.DeleteTaskManagerLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTaskManagerLineCompleted(this, new DeleteTaskManagerLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:MemberEditTaskLines", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="MemberEditTaskLines_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool MemberEditTaskLines(int lineNo, bool markComplete) {
            object[] results = this.Invoke("MemberEditTaskLines", new object[] {
                        lineNo,
                        markComplete});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MemberEditTaskLinesAsync(int lineNo, bool markComplete) {
            this.MemberEditTaskLinesAsync(lineNo, markComplete, null);
        }
        
        /// <remarks/>
        public void MemberEditTaskLinesAsync(int lineNo, bool markComplete, object userState) {
            if ((this.MemberEditTaskLinesOperationCompleted == null)) {
                this.MemberEditTaskLinesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMemberEditTaskLinesOperationCompleted);
            }
            this.InvokeAsync("MemberEditTaskLines", new object[] {
                        lineNo,
                        markComplete}, this.MemberEditTaskLinesOperationCompleted, userState);
        }
        
        private void OnMemberEditTaskLinesOperationCompleted(object arg) {
            if ((this.MemberEditTaskLinesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MemberEditTaskLinesCompleted(this, new MemberEditTaskLinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:BeginProject", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="BeginProject_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool BeginProject(string projectNo, string user) {
            object[] results = this.Invoke("BeginProject", new object[] {
                        projectNo,
                        user});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void BeginProjectAsync(string projectNo, string user) {
            this.BeginProjectAsync(projectNo, user, null);
        }
        
        /// <remarks/>
        public void BeginProjectAsync(string projectNo, string user, object userState) {
            if ((this.BeginProjectOperationCompleted == null)) {
                this.BeginProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginProjectOperationCompleted);
            }
            this.InvokeAsync("BeginProject", new object[] {
                        projectNo,
                        user}, this.BeginProjectOperationCompleted, userState);
        }
        
        private void OnBeginProjectOperationCompleted(object arg) {
            if ((this.BeginProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginProjectCompleted(this, new BeginProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:CompleteProject", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="CompleteProject_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool CompleteProject(string projectNo, string user) {
            object[] results = this.Invoke("CompleteProject", new object[] {
                        projectNo,
                        user});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CompleteProjectAsync(string projectNo, string user) {
            this.CompleteProjectAsync(projectNo, user, null);
        }
        
        /// <remarks/>
        public void CompleteProjectAsync(string projectNo, string user, object userState) {
            if ((this.CompleteProjectOperationCompleted == null)) {
                this.CompleteProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteProjectOperationCompleted);
            }
            this.InvokeAsync("CompleteProject", new object[] {
                        projectNo,
                        user}, this.CompleteProjectOperationCompleted, userState);
        }
        
        private void OnCompleteProjectOperationCompleted(object arg) {
            if ((this.CompleteProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteProjectCompleted(this, new CompleteProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:CancelProject", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="CancelProject_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool CancelProject(string projectNo, string user) {
            object[] results = this.Invoke("CancelProject", new object[] {
                        projectNo,
                        user});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CancelProjectAsync(string projectNo, string user) {
            this.CancelProjectAsync(projectNo, user, null);
        }
        
        /// <remarks/>
        public void CancelProjectAsync(string projectNo, string user, object userState) {
            if ((this.CancelProjectOperationCompleted == null)) {
                this.CancelProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelProjectOperationCompleted);
            }
            this.InvokeAsync("CancelProject", new object[] {
                        projectNo,
                        user}, this.CancelProjectOperationCompleted, userState);
        }
        
        private void OnCancelProjectOperationCompleted(object arg) {
            if ((this.CancelProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelProjectCompleted(this, new CancelProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:UploadTasksDocument", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="UploadTasksDocument_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool UploadTasksDocument(int lineNo, string attachmentLink, string fileName) {
            object[] results = this.Invoke("UploadTasksDocument", new object[] {
                        lineNo,
                        attachmentLink,
                        fileName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTasksDocumentAsync(int lineNo, string attachmentLink, string fileName) {
            this.UploadTasksDocumentAsync(lineNo, attachmentLink, fileName, null);
        }
        
        /// <remarks/>
        public void UploadTasksDocumentAsync(int lineNo, string attachmentLink, string fileName, object userState) {
            if ((this.UploadTasksDocumentOperationCompleted == null)) {
                this.UploadTasksDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTasksDocumentOperationCompleted);
            }
            this.InvokeAsync("UploadTasksDocument", new object[] {
                        lineNo,
                        attachmentLink,
                        fileName}, this.UploadTasksDocumentOperationCompleted, userState);
        }
        
        private void OnUploadTasksDocumentOperationCompleted(object arg) {
            if ((this.UploadTasksDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTasksDocumentCompleted(this, new UploadTasksDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:DeleteAttachedLinks", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="DeleteAttachedLinks_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool DeleteAttachedLinks(int lineNo) {
            object[] results = this.Invoke("DeleteAttachedLinks", new object[] {
                        lineNo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAttachedLinksAsync(int lineNo) {
            this.DeleteAttachedLinksAsync(lineNo, null);
        }
        
        /// <remarks/>
        public void DeleteAttachedLinksAsync(int lineNo, object userState) {
            if ((this.DeleteAttachedLinksOperationCompleted == null)) {
                this.DeleteAttachedLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAttachedLinksOperationCompleted);
            }
            this.InvokeAsync("DeleteAttachedLinks", new object[] {
                        lineNo}, this.DeleteAttachedLinksOperationCompleted, userState);
        }
        
        private void OnDeleteAttachedLinksOperationCompleted(object arg) {
            if ((this.DeleteAttachedLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAttachedLinksCompleted(this, new DeleteAttachedLinksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:CreateProjectPlanHead" +
            "er", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="CreateProjectPlanHeader_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool CreateProjectPlanHeader(string description, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime startDate, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime endDate, string status, string projectNumber) {
            object[] results = this.Invoke("CreateProjectPlanHeader", new object[] {
                        description,
                        startDate,
                        endDate,
                        status,
                        projectNumber});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateProjectPlanHeaderAsync(string description, System.DateTime startDate, System.DateTime endDate, string status, string projectNumber) {
            this.CreateProjectPlanHeaderAsync(description, startDate, endDate, status, projectNumber, null);
        }
        
        /// <remarks/>
        public void CreateProjectPlanHeaderAsync(string description, System.DateTime startDate, System.DateTime endDate, string status, string projectNumber, object userState) {
            if ((this.CreateProjectPlanHeaderOperationCompleted == null)) {
                this.CreateProjectPlanHeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProjectPlanHeaderOperationCompleted);
            }
            this.InvokeAsync("CreateProjectPlanHeader", new object[] {
                        description,
                        startDate,
                        endDate,
                        status,
                        projectNumber}, this.CreateProjectPlanHeaderOperationCompleted, userState);
        }
        
        private void OnCreateProjectPlanHeaderOperationCompleted(object arg) {
            if ((this.CreateProjectPlanHeaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateProjectPlanHeaderCompleted(this, new CreateProjectPlanHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:AddPlanActivity", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="AddPlanActivity_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool AddPlanActivity(string activity, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime startDate, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime endDate, string strategicObjective, string projectNumber, string status, string strategicPlan) {
            object[] results = this.Invoke("AddPlanActivity", new object[] {
                        activity,
                        startDate,
                        endDate,
                        strategicObjective,
                        projectNumber,
                        status,
                        strategicPlan});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddPlanActivityAsync(string activity, System.DateTime startDate, System.DateTime endDate, string strategicObjective, string projectNumber, string status, string strategicPlan) {
            this.AddPlanActivityAsync(activity, startDate, endDate, strategicObjective, projectNumber, status, strategicPlan, null);
        }
        
        /// <remarks/>
        public void AddPlanActivityAsync(string activity, System.DateTime startDate, System.DateTime endDate, string strategicObjective, string projectNumber, string status, string strategicPlan, object userState) {
            if ((this.AddPlanActivityOperationCompleted == null)) {
                this.AddPlanActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPlanActivityOperationCompleted);
            }
            this.InvokeAsync("AddPlanActivity", new object[] {
                        activity,
                        startDate,
                        endDate,
                        strategicObjective,
                        projectNumber,
                        status,
                        strategicPlan}, this.AddPlanActivityOperationCompleted, userState);
        }
        
        private void OnAddPlanActivityOperationCompleted(object arg) {
            if ((this.AddPlanActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPlanActivityCompleted(this, new AddPlanActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:ModifyProjectPlanActi" +
            "vity", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="ModifyProjectPlanActivity_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool ModifyProjectPlanActivity(int lineNo, string activity, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime startDate, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime endDate, string strategicObjective, string strategicPlan, string status) {
            object[] results = this.Invoke("ModifyProjectPlanActivity", new object[] {
                        lineNo,
                        activity,
                        startDate,
                        endDate,
                        strategicObjective,
                        strategicPlan,
                        status});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyProjectPlanActivityAsync(int lineNo, string activity, System.DateTime startDate, System.DateTime endDate, string strategicObjective, string strategicPlan, string status) {
            this.ModifyProjectPlanActivityAsync(lineNo, activity, startDate, endDate, strategicObjective, strategicPlan, status, null);
        }
        
        /// <remarks/>
        public void ModifyProjectPlanActivityAsync(int lineNo, string activity, System.DateTime startDate, System.DateTime endDate, string strategicObjective, string strategicPlan, string status, object userState) {
            if ((this.ModifyProjectPlanActivityOperationCompleted == null)) {
                this.ModifyProjectPlanActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyProjectPlanActivityOperationCompleted);
            }
            this.InvokeAsync("ModifyProjectPlanActivity", new object[] {
                        lineNo,
                        activity,
                        startDate,
                        endDate,
                        strategicObjective,
                        strategicPlan,
                        status}, this.ModifyProjectPlanActivityOperationCompleted, userState);
        }
        
        private void OnModifyProjectPlanActivityOperationCompleted(object arg) {
            if ((this.ModifyProjectPlanActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyProjectPlanActivityCompleted(this, new ModifyProjectPlanActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:DeletePlanActivity", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="DeletePlanActivity_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool DeletePlanActivity(int lineNo) {
            object[] results = this.Invoke("DeletePlanActivity", new object[] {
                        lineNo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePlanActivityAsync(int lineNo) {
            this.DeletePlanActivityAsync(lineNo, null);
        }
        
        /// <remarks/>
        public void DeletePlanActivityAsync(int lineNo, object userState) {
            if ((this.DeletePlanActivityOperationCompleted == null)) {
                this.DeletePlanActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePlanActivityOperationCompleted);
            }
            this.InvokeAsync("DeletePlanActivity", new object[] {
                        lineNo}, this.DeletePlanActivityOperationCompleted, userState);
        }
        
        private void OnDeletePlanActivityOperationCompleted(object arg) {
            if ((this.DeletePlanActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePlanActivityCompleted(this, new DeletePlanActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:SendProjectPlanApprov" +
            "al", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="SendProjectPlanApproval_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool SendProjectPlanApproval(string projectNo) {
            object[] results = this.Invoke("SendProjectPlanApproval", new object[] {
                        projectNo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendProjectPlanApprovalAsync(string projectNo) {
            this.SendProjectPlanApprovalAsync(projectNo, null);
        }
        
        /// <remarks/>
        public void SendProjectPlanApprovalAsync(string projectNo, object userState) {
            if ((this.SendProjectPlanApprovalOperationCompleted == null)) {
                this.SendProjectPlanApprovalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendProjectPlanApprovalOperationCompleted);
            }
            this.InvokeAsync("SendProjectPlanApproval", new object[] {
                        projectNo}, this.SendProjectPlanApprovalOperationCompleted, userState);
        }
        
        private void OnSendProjectPlanApprovalOperationCompleted(object arg) {
            if ((this.SendProjectPlanApprovalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendProjectPlanApprovalCompleted(this, new SendProjectPlanApprovalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS:AddClosureProject", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", ResponseElementName="AddClosureProject_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ProjectManagementWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool AddClosureProject(string projectCode) {
            object[] results = this.Invoke("AddClosureProject", new object[] {
                        projectCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddClosureProjectAsync(string projectCode) {
            this.AddClosureProjectAsync(projectCode, null);
        }
        
        /// <remarks/>
        public void AddClosureProjectAsync(string projectCode, object userState) {
            if ((this.AddClosureProjectOperationCompleted == null)) {
                this.AddClosureProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddClosureProjectOperationCompleted);
            }
            this.InvokeAsync("AddClosureProject", new object[] {
                        projectCode}, this.AddClosureProjectOperationCompleted, userState);
        }
        
        private void OnAddClosureProjectOperationCompleted(object arg) {
            if ((this.AddClosureProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddClosureProjectCompleted(this, new AddClosureProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ModifyProjectBenefitCompletedEventHandler(object sender, ModifyProjectBenefitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyProjectBenefitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyProjectBenefitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DeleteBenefitLineCompletedEventHandler(object sender, DeleteBenefitLineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteBenefitLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteBenefitLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AddProjectBenefitCompletedEventHandler(object sender, AddProjectBenefitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddProjectBenefitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddProjectBenefitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AddProjectRiskCompletedEventHandler(object sender, AddProjectRiskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddProjectRiskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddProjectRiskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DeleteRiskLineCompletedEventHandler(object sender, DeleteRiskLineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteRiskLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteRiskLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ModifyProjectRiskCompletedEventHandler(object sender, ModifyProjectRiskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyProjectRiskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyProjectRiskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AddProjectTaskCompletedEventHandler(object sender, AddProjectTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddProjectTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddProjectTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ManagerEditTaskLinesCompletedEventHandler(object sender, ManagerEditTaskLinesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ManagerEditTaskLinesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ManagerEditTaskLinesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DeleteTaskManagerLineCompletedEventHandler(object sender, DeleteTaskManagerLineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTaskManagerLineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTaskManagerLineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MemberEditTaskLinesCompletedEventHandler(object sender, MemberEditTaskLinesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MemberEditTaskLinesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MemberEditTaskLinesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BeginProjectCompletedEventHandler(object sender, BeginProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeginProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BeginProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CompleteProjectCompletedEventHandler(object sender, CompleteProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompleteProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompleteProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CancelProjectCompletedEventHandler(object sender, CancelProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadTasksDocumentCompletedEventHandler(object sender, UploadTasksDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTasksDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTasksDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DeleteAttachedLinksCompletedEventHandler(object sender, DeleteAttachedLinksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteAttachedLinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteAttachedLinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CreateProjectPlanHeaderCompletedEventHandler(object sender, CreateProjectPlanHeaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateProjectPlanHeaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateProjectPlanHeaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AddPlanActivityCompletedEventHandler(object sender, AddPlanActivityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPlanActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPlanActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ModifyProjectPlanActivityCompletedEventHandler(object sender, ModifyProjectPlanActivityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyProjectPlanActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyProjectPlanActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DeletePlanActivityCompletedEventHandler(object sender, DeletePlanActivityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePlanActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePlanActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendProjectPlanApprovalCompletedEventHandler(object sender, SendProjectPlanApprovalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendProjectPlanApprovalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendProjectPlanApprovalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AddClosureProjectCompletedEventHandler(object sender, AddClosureProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddClosureProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddClosureProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591