@model DynamicsNAV365_StaffPortal.Models.HumanResource.TimeSheets.TimeSheetModelHeader

@{
    ViewBag.Title = "View TimeSheet";
}
<div class="wrapper row-offcanvas row-offcanvas-left">
    <!--Render Finance Sidebar-->
    @{Html.RenderAction("_HumanResourceSidebar", "HumanResourceHome");}
    <aside class="right-side">
        <section class="content">
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        @using (Html.BeginForm("SendToSupervisor", "Timesheet", FormMethod.Post, new { @class = "" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class="card-header" data-background-color="company_card">
                                <div class="row">
                                    <div class="col-md-4">
                                        <h4 class="title"><i>View TimeSheet Request - @Model.No</i></h4>
                                    </div>
                                    <div class="col-md-8">
                                        @*<a class="btn btn-warning pull-right btn-xs" type="submit" target="_blank" href="@Url.Action("GenerateTimesheetReport", "Timesheet")">
                                            <i class="fa fa-address-book"></i>
                                            Timesheet Report
                                        </a>*@
                                        <input type="button" class="btn btn-warning btn-xs pull-right ladda-button" value="Timesheet Report" onclick="GenerateTimesheetReport('@Model.No', '@Model.Month', '@Model.Year', @Model.LineNo);" />
                                        <a class="btn btn-danger pull-right btn-xs" type="submit" href="@Url.Action("Index", "Timesheet")">
                                            <i class="fa fa-close"></i>
                                            Close
                                        </a>
                                        @if (@Model.ApprovalStatus == "Employee")
                                        {
                                        <input type="button" class="btn btn-green btn-xs pull-right ladda-button" value="Send to Supervisor" onclick="SendToSupervisor('@Model.No', '@Model.Month', '@Model.Year');" />
                                        }
                                        @*<input type="submit" id="submitBtn" name="Command" value="Send to Supervisor" class="btn btn-green btn-xs pull-right ladda-button" data-style="slide-right" />*@
                                    </div>
                                </div>
                            </div>
                            <div class="card-content">
                                @if (Model != null && Model.ErrorStatus == true)
                                {
                                    <div class="alert alert-danger">
                                        <strong>Error! </strong>@Html.Raw(HttpUtility.HtmlDecode(Model.ErrorMessage))
                                    </div>
                                }
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group label-floating">
                                                    @Html.LabelFor(model => model.No, htmlAttributes: new { @id = "EmployeeNoLbl", @class = "control-label" })
                                                    @Html.EditorFor(model => model.No, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                    @Html.ValidationMessageFor(model => model.No, "", new { @id = "EmployeeNoError", @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group label-floating">
                                                    @Html.LabelFor(model => model.EmpName, htmlAttributes: new { @id = "EmployeeNameLbl", @class = "control-label" })
                                                    @Html.EditorFor(model => model.EmpName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                                    @Html.ValidationMessageFor(model => model.EmpName, "", new { @id = "EmployeeNameError", @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group label-floating">
                                                    @Html.LabelFor(model => model.PeriodStartDate, htmlAttributes: new { @id = "DateFromLbl", @class = "control-label" })
                                                    @Html.EditorFor(model => model.PeriodStartDate, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                                    @Html.ValidationMessageFor(model => model.PeriodStartDate, "", new { @id = "DateFromError", @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group label-floating">
                                                    @Html.LabelFor(model => model.PeriodEndDate, htmlAttributes: new { @id = "DateToLbl", @class = "control-label" })
                                                    @Html.EditorFor(model => model.PeriodEndDate, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                                    @Html.ValidationMessageFor(model => model.PeriodEndDate, "", new { @id = "DateToError", @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group label-floating">
                                                    @Html.LabelFor(model => model.TotalDaysWorked, htmlAttributes: new { @id = "DateToLbl", @class = "control-label" })
                                                    @Html.EditorFor(model => model.TotalDaysWorked, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                                    @Html.ValidationMessageFor(model => model.TotalDaysWorked, "", new { @id = "DateToError", @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group label-floating">
                                                    @Html.LabelFor(model => model.HoursWorked, htmlAttributes: new { @id = "DateToLbl", @class = "control-label" })
                                                    @Html.EditorFor(model => model.HoursWorked, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                                    @Html.ValidationMessageFor(model => model.HoursWorked, "", new { @id = "DateToError", @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group label-floating">
                                                    @Html.LabelFor(model => model.Month, htmlAttributes: new { @id = "DateFromLbl", @class = "control-label" })
                                                    @Html.EditorFor(model => model.Month, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                                    @Html.ValidationMessageFor(model => model.Month, "", new { @id = "DateFromError", @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group label-floating">
                                                    @Html.LabelFor(model => model.Year, htmlAttributes: new { @id = "DateToLbl", @class = "control-label" })
                                                    @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                                    @Html.ValidationMessageFor(model => model.Year, "", new { @id = "DateToError", @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="form-group label-floating">
                                                    @Html.LabelFor(model => model.Comments, htmlAttributes: new { @id = "CommentsLbl", @class = "control-label" })
                                                    @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                                    @Html.ValidationMessageFor(model => model.Comments, "", new { @id = "CommentsError", @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        @*<div class="row">
                                            <div class="col-md-12">
                                                <div class="form-group label-floating">
                                                    @Html.LabelFor(model => model.ListofTasks, htmlAttributes: new { @id = "ListofTasksLbl", @class = "control-label" })
                                                    @Html.EditorFor(model => model.ListofTasks, new { htmlAttributes = new { @class = "form-control"} })
                                                    @Html.ValidationMessageFor(model => model.ListofTasks, "", new { @id = "ListofTasksError", @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <input type="button" class="btn btn-success btn-xs pull-left ladda-button" value="Update List of Tasks" onclick="UpdateTasks('@Model.No', '@Model.Month', '@Model.Year', @Model.EmpNo);" />*@
                                    </div>
                                    
                                </div>
                            </div>
                                                    }
                        <div class="row">
                            <div class="col-md-12">
                                @if (@Model.ApprovalStatus == "Employee")
                                {
                                    <input type="button" class="btn btn-success btn-xs pull-right ladda-button" value="Add Task" onclick="AddTasks('@Model.No', '@Model.Month', '@Model.Year', '@Model.LineNo');" />

                                 }
                                <hr style="border:1px solid black" />
                                <b>List of Tasks Undertaken</b>
                                <hr />
                                <div id="divTaskLines"></div>
                                <hr style="border:1px solid black" />
                            </div>
                        </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <hr style="border:1px solid black" />
                                    <b>Timesheet Ledger Entries</b>
                                    <hr />
                                    <div id="divTimeLines"></div>
                                    <hr style="border:1px solid black" />
                                </div>
                            </div>
                            <div class="row"></div>
                    </div>
                </div>
            </div>
        </section>
    </aside>
</div>
@*//////////////////////Modal////////////////////////////*@
<div id="myModal" class="modal fade" tabindex="-1" role="dialog" ke aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel">Edit Timesheet</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@*//////////////////////Modal////////////////////////////*@
<div id="myModalTasks" class="modal fade" tabindex="-1" role="dialog" ke aria-labelledby="myModalTasks" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel">Add Tasks</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBodyTasks">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@section scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            LoadTimeSheetDocumentLines(`@Model.No`);
            LoadTimeSheetTasks(`@Model.No`, `@Model.Year`, `@Model.Month`, `@Model.LineNo`);
        });
        var LoadTimeSheetDocumentLines = function (DocNo) {
            $.ajax({
                async: true,
                type: "POST",
                datatype: "json",
                contentType: "application/json; charset = utf-8",
                processData: false,
                data: JSON.stringify({ DocNo: DocNo}),
                url: "/Timesheet/TimeSheetLinesView",
                success: function (data) {
                    $("#divTimeLines").html(data);
                },
                error: function () {
                    window.alert("There is some problem to process your request. Please try after some time");
                }
            });
        };
        var LoadTimeSheetTasks = function (DocNo, Year, Month, TSLineNo) {
            $.ajax({
                async: true,
                type: "POST",
                datatype: "json",
                contentType: "application/json; charset = utf-8",
                processData: false,
                data: JSON.stringify({ DocNo: DocNo, Year: Year,Month: Month, TSLineNo: TSLineNo}),
                url: "/Timesheet/TasksLineView",
                success: function (data) {
                    $("#divTaskLines").html(data);
                },
                error: function () {
                    window.alert("There is some problem to process your request. Please try after some time");
                }
            });
        };
        var EditItem = function (LnNo, DocNo) {
            $.ajax({
                async: true,
                type: "POST",
                datatype: "json",
                contentType: "application/json; charset = utf-8",
                processData: false,
                data: JSON.stringify({ LnNo: LnNo, DocNo: DocNo }),

                url: '/Timesheet/EditTimeSheetEntry',
                success: function (data) {
                    $("#modalBody").html(data);
                    $("#myModal").modal("show");
                }
            });
        };
        var UpdateLineItem = function (DocNo, LnNo) {
            var Hrs = $("#txtHours").val();
            var Tasks = $("#txttasks").val();
            console.log(Hrs);
            $.ajax({
                async: true,
                type: "POST",
                datatype: "json",
                contentType: "application/json; charset = utf-8",
                processData: false,
                data: JSON.stringify({ LnNo: LnNo, DocNo: DocNo, Hrs: Hrs, Tasks: Tasks }),

                url: '/Timesheet/UpdateTimeSheetEntry',
                success: function (data) {
                    window.alert(data.message);
                    window.location.reload();
                }
            });
        };
        var UpdateNewTask = function () {
            var ProgramCode = $("#ddlProgram").children("option:selected").val();
            var Hrs = $("#txtHours").val();
            var tasks = $("#txttasks").val();
            var DocNo = `@Model.No`;
            var Year = `@Model.Year`;
            var LnNo = `@Model.LineNo`;
            var Tasks = $("#txttasks").val();
            var Mth = `@Model.Month`;
            if (ProgramCode == "") {
                window.alert("Program Code is required");
                return;
            }else if(Hrs == ""){
                window.alert("Hours worked is required");
                return;
            } else if (tasks == "") {
                window.alert("List of tasks is required");
                return;
        }else{
                $.ajax({
                    type: "POST",
                    url: "/TimeSheet/SubmitTask",
                    data: JSON.stringify({ ProgramCode: ProgramCode, Mth: Mth, Year: Year, LnNo: LnNo, DocNo: DocNo, Hrs: Hrs, Tasks:Tasks }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        window.alert(data.message);
                        window.location.reload();
                    }

                });
        }
            }
        var AddTasks = function (DocNo, Mnth, Year, LnNo){
            $.ajax({
                async: true,
                type: "POST",
                datatype: "json",
                contentType: "application/json; charset = utf-8",
                processData: false,
                data: JSON.stringify({ LnNo: LnNo, DocNo: DocNo, Mnth: Mnth, Year:Year}),

                url: '/Timesheet/AddTasks',
                success: function (data) {
                    $("#modalBodyTasks").html(data);
                    $("#myModalTasks").modal("show");
            }
            });
        };
        var DeleteItem = function (LnNo, DocNo, Mth, Year) {
            $.ajax({
                async: true,
                type: "POST",
                datatype: "json",
                contentType: "application/json; charset = utf-8",
                processData: false,
                data: JSON.stringify({ LnNo: LnNo, DocNo: DocNo, Mth: Mth, Year: Year }),

                url: '/Timesheet/DeleteTask',
                success: function (data) {
                    window.alert(data.message);
                    window.location.reload();
                }
            });
        };
        var UpdateTasks = function(DocNo, Mth, Yr, EmpNo){
            var tasks = $("#ListofTasks").val();
            if(tasks == null || tasks == ''){
                window.alert('Kindly add atleast one task');
                window.location.reload();
            }else{
                $.ajax({
                    async: true,
                    type: "POST",
                    datatype: "json",
                    contentType: "application/json; charset = utf-8",
                    processData: false,
                    data: JSON.stringify({ DocNo: DocNo, Mth: Mth, Yr: Yr, EmpNo: EmpNo, tasks: tasks }),

                    url: '/Timesheet/UpdateTasks',
                    success: function (data) {

                        window.alert(data.message);
                        window.location.reload();
                    }
                });
            }
        };
        var SendToSupervisor = function (DocNo, Mth, Yr) {
            //console.log(`@Model.No`);
            $.ajax({
                async: true,
                type: "POST",
                datatype: "json",
                contentType: "application/json; charset = utf-8",
                processData: false,
                data: JSON.stringify({ DocNo: DocNo, Mth: Mth, Yr: Yr }),

                url: '/Timesheet/SendToSupervisor',
                success: function (data) {

                    window.alert(data.message);
                    window.location.reload();
                    //window.location('/Timesheet');
                },
                error: function () {
                window.alert(data.message);
                }
            });
        };

        var GenerateTimesheetReport = function (DocNo, Mth, Yr, EmpNo) {
            //console.log(`@Model.No`);
            $.ajax({
                async: true,
                type: "POST",
                datatype: "json",
                contentType: "application/json; charset = utf-8",
                processData: false,
                data: JSON.stringify({ DocNo: DocNo, Mth: Mth, Yr: Yr, EmpNo: EmpNo }),

                url: '/Timesheet/GenerateTimesheetReport',
                success: function (data) {
                    window.open(data.message, '_blank').focus();
                    //window.alert(data.message);
                    //window.location.reload();
                },
                error: function () {
                    window.alert(data.message);
                }
            });
        };
    </script>
}


