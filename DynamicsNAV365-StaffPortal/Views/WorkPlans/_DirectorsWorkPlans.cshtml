@model DynamicsNAV365_StaffPortal.Models.PerformanceManagement.CEOWorkPlanModel
@{
    ViewBag.Title = "FillWorkplan";
}
@{
    var WeightList = new SelectList(
          new List<SelectListItem>
          {
            new SelectListItem {Text = "   5", Value = "5"},

          }, "Value", "Text");
}

<div class="wrapper row-offcanvas row-offcanvas-left">
    <!--Render Human Resource Sidebar-->
    @*@{Html.RenderAction("_PerformanceManagementSidebar", "PerformanceHome");}*@
    <aside class="right-side">
        <section class="content">
            <div class="row">
                <div class="col-md-12"> 
                    <div class="card">
                        <div class="card-header" data-background-color="company_card">
                            <h4 class="title" style="text-align:left;margin-left:20px;">Directors' Workplans</h4>
                        </div>                     
                        <p style="color:black; font-weight:bold; font-size:18px; padding:23px;">
                            Please complete the work plan by filling in the empty spaces in each line. Utilize the edit button
                            </p>
                        <div class="row">
                            <div class="col-lg-6 col-md-s col-sm-6 col-xs-6">
                             <button class="btn btn-primary btn-xs" type="button" data-toggle="modal" data-target="#ApplicationDocumentModal" onclick="ClearWorkPlanCardDirectors();" style="float:left; padding:5px; border-radius:0px; margin-left:50px; ">
                                <i class="fa fa-plus"></i>
                                Add Objective
                            </button>
                                </div>                           

                            <div class="col-lg-6 col-md-s col-sm-6 col-xs-6">
                                <button class="btn btn-success btn-xs" type="button" data-toggle="modal" onclick ="CreateDirectorsHeader();"style=" color:white; font-weight:bold; font-size:14px; float:right; padding:5px; border-radius:0px; margin-right:50px; ">
                                Load CEO Workplan Lines
                                </button>
                            </div>
                            </div>
                       
                        <div id="TableContainer" class="table-responsive">
                            <input id="Designation" value="@Model.Designation" hidden="hidden">
                            <input id="UserId" value="@Model.UserId" hidden="hidden">
                            <input id="Mydirectorate" value="@Model.Directorate" hidden="hidden">

                            <table id="ApplicationDocumentsTbl" class="table table-striped table-bordered" style="">
                               
                                <thead class="text-primary">
                                    <tr>
                                        <th>Performance Objective</th>
                                        <th>Project</th>
                                        <th>Performance Outcome</th>
                                        <th>Performance Measure/Indicator</th>
                                        <th>Activity</th>
                                        <th>Weight Total</th>
                                        <th>Completion Date</th>
                                        <th>Perspective</th>
                                        @*<th>Source</th>*@
                                        <th>Action</th> 

                                    </tr>
                                </thead>
                                <tbody>                                   
                                </tbody>
                            </table>
                        </div>

                        <div id="ApplicationDocumentModal" class="modal fade" role="dialog" aria-labelledby="ApplicationDocumentModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <button class="btn close" type="button" data-dismiss="modal"><i class="fa fa-close"></i></button>
                                        <h4 id="ApplicationDocumentModalLabel" class="modal-title" style="text-align:center;color:white;font-family:'Times New Roman';font-size:18px">Workplan Card</h4>
                                        <div class="col-md-12">                                          
                                        </div>
                                    </div>
                                    <div class="modal-body">
                                        <input id="Designation" value="@Model.Designation" hidden="hidden">
                                        <input id="UserId" value="@Model.UserId" hidden="hidden">
                                        <input id="Directorate" value="@Model.Directorate" hidden="hidden">

                                        <input id="UserCode" hidden="hidden">
                                        <input id="HeaderNo" hidden="hidden">
                                        <div class="card-content">
                                            @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "" }))
                                            {
                                                @Html.AntiForgeryToken()

                                                <div class="row">
                                                    <div class="col-md-4">
                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.Designation, htmlAttributes: new { @id = "DesignationLbl", @class = "control-label" })
                                                            @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control", @id = "DesignationItem", @readonly = "true" } })
                                                            @Html.ValidationMessageFor(model => model.Designation, "", new { @id = "DesignationError", @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.Directorate, htmlAttributes: new { @id = "DirectorateLbl", @class = "control-label" })
                                                            @Html.EditorFor(model => model.Directorate, new { htmlAttributes = new { @class = "form-control", @id = "DirectorateItem", @readonly = "true" } })
                                                            @Html.ValidationMessageFor(model => model.Directorate, "", new { @id = "DirectorateError", @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                    <div class="col-md-5">
                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.Perspective, htmlAttributes: new { @id = "PerspectiveLbl", @class = "control-label" })
                                                            @Html.DropDownListFor(model => model.Perspective, Model.PerspectiveCodes, "--Select--", new { @class = "form-control", @id = "PerspectiveItem", @readonly = "true" })
                                                            @Html.ValidationMessageFor(model => model.Perspective, "", new { @id = "PerspectiveError", @class = "text-danger" })
                                                        </div>
                                                    </div>


                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.PerformanceObjective, htmlAttributes: new { @id = "PerformanceObjectiveLbl", @class = "control-label" })
                                                            @Html.DropDownListFor(model => model.PerformanceObjective, Model.PerformanceObjectiveCodes, "-Select--", new { @class = "form-control", @id = "PerformanceObjectiveCodeItem" })
                                                            @Html.ValidationMessageFor(model => model.PerformanceObjective, "", new { @id = "PMOError", @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.Project, htmlAttributes: new { @id = "ProjectLbl", @class = "control-label" })
                                                            @Html.EditorFor(model => model.Project, new { htmlAttributes = new { @class = "form-control", @id = "ProjectItem" } })
                                                            @Html.ValidationMessageFor(model => model.Project, "", new { @id = "ProjectError", @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.Activity, htmlAttributes: new { @id = "ActivityLbl", @class = "control-label" })
                                                            @Html.EditorFor(model => model.Activity, "  ", new { htmlAttributes = new { @class = "form-control", @id = "ActivityItem", @readonly = "true" } })
                                                            @Html.ValidationMessageFor(model => model.Activity, "", new { @id = "ActivityError", @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.PMI, htmlAttributes: new { @id = "ActivityLbl", @class = "control-label" })
                                                            @Html.EditorFor(model => model.PMI, " ", new { htmlAttributes = new { @class = "form-control", @id = "PMIItem", @readonly = "true" } })
                                                            @Html.ValidationMessageFor(model => model.PMI, "", new { @id = "PMIError", @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.PerformanceOutcome, htmlAttributes: new { @id = "PerformanceOutcomeLbl", @class = "control-label" })
                                                            @Html.EditorFor(model => model.PerformanceOutcome, new { htmlAttributes = new { @class = "form-control", @id = "POItem" } })
                                                            @Html.ValidationMessageFor(model => model.PerformanceOutcome, "", new { @id = "POIError", @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.CompletionDate, htmlAttributes: new { @id = "CompletionDateLbl", @class = "control-label" })
                                                            @Html.EditorFor(model => model.CompletionDate, "{0:yyyy-MM-dd}", new { htmlAttributes = new { @class = "form-control", @id = "CompletionDateItem" } })
                                                            @Html.ValidationMessageFor(model => model.CompletionDate, "", new { @id = "CompletionDateError", @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.WeightTotal, htmlAttributes: new { @id = "WeightTotalLbl", @class = "control-label" })
                                                            @Html.EditorFor(model => model.WeightTotal, new { htmlAttributes = new { @class = "form-control", @id = "WeightTotalItem" }})
                                                            @Html.ValidationMessageFor(model => model.WeightTotal, "", new { @id = "WeightTotalError", @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                        <div class="modal-footer">
                                            <div class="col-md-8">
                                                <button id="UploadBtn" class="btn btn-success btn-xs" type="button" onclick="InsertDirectorWPLines();"><i class="fa fa-print" style="align-content:center"></i>Save</button>
                                                <button id="ModifyBtn" class="btn btn-success btn-xs" type="button" onclick="ModifyDirectorWPLines();"><i class="fa fa-adjust" style="align-content:center"></i>Update</button>
                                                <button class="btn btn-danger btn-xs" type="button" data-dismiss="modal"><i class="fa fa-close"></i>Cancel</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer">
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </section>
    </aside>

</div>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>


<script>

 //Load Scripts
    $(document).ready(function () {
    LoadDirectorsWorkplanLines();

//Search Fnction for Performance Objective
     $("#PerformanceObjectiveCodeItem").select2({
        //placeholder: $("#PerformanceObjectiveLbl").text(),
        allowClear: true
    });

    $(function(){
    $('#CompletionDateItem').datepicker({
        changeMonth:true,
        changeYear: true,
		showButtonPanel: true,
        yearRange: '1999:2030', // Optional Year Range
        dateFormat: 'dd/mm/yy',

		});
    })

    });

  //Prevent Typing into the completion date Field
$('#CompletionDateItem').keydown(function(e) {
		   e.preventDefault();
			return false;
	});
//Clear WorkPlan Card
    function ClearWorkPlanCardDirectors() {
	$("#PerformanceObjectiveCodeItem").val("");
	$("#ProjectItem").val("");
	$("#ActivityItem").val("");
	$("#POutcomeItem").val("");
	$("#PerspectiveItem").val("");
	$("#CompletionDateItem").val("");
	$("#WeightTotalItem").val("");
	$("#PMIItem").val("");
    $("#UploadBtn").show();
	$("#ModifyBtn").hide();

}

//Load Corresponding Lines for Performance Objective Item
$(document).ready(function () {
        $('#PerformanceObjectiveCodeItem').change(function () {
            $.ajax({
                type: "post",
                url: "/WorkPlans/GetLines",
                data: { WorkplanCode: $('#PerformanceObjectiveCodeItem').val() },
                datatype: "json",
                cache: false,
                success: function(data) {
                $.each(data, function(index, item) {
                 var AcItem=item.Activity;
                 $('#ActivityItem').val(item.Activity);
                 $('#PMIItem').val(item.PMI);
                });
                },
                error: function(XMLHttpRequest, textStatus, errorThrown) {
                alert("some error");
                }
            });
        });

     });


//Validate Director WorkPlan Fields
    function ValidateDirectorWorkPlanFields() {
	var isValid = true;
	var label = "";

	if ($("#PerformanceObjectiveCodeItem").val().trim() == "") {
		$("#PMOError").text("Performance Objective is required");
		isValid = false;
	}
	else {
		$("#PMOError").text("");
	}
    if ($("#ProjectItem").val().trim() == "") {
		$("#ProjectError").text("Project is required");
		isValid = false;
	}
	else {
		$("#ProjectError").text("");
	}

	if ($("#ActivityItem").val().trim() == "") {
		$("#ActivityError").text("Activity is required");
		isValid = false;
	}
	else {
		$("#ActivityError").text("");
	}

	if ($("#PMIItem").val().trim() == "") {
		$("#PMIError").text("This Field is required");
		isValid = false;
	}
	else {
		$("#PMIError").text("");
	}
    if ($("#POItem").val().trim() == "") {
		$("#POIError").text("This Field is required");
		isValid = false;
	}
	else {
		$("#POIError").text("");
	}
     if ($("#CompletionDateItem").val().trim() == "") {
		$("#CompletionDateError").text("This Field is required");
		isValid = false;
	}
	else {
		$("#CompletionDateError").text("");
	}

    if ($("#PerspectiveItem").val().trim() == "") {
		$("#PerspectiveError").text("Perspective is required");
		isValid = false;
	}
	else {
		$("#PerspectiveError").text("");
	}

	return isValid;
}


//Insert  Director Lines
    function InsertDirectorWPLines() {
    var validLine = ValidateDirectorWorkPlanFields();
	if (validLine == false) {
		return false;
	}

	var Perspective = $("#PerspectiveItem").val();
    var LineNo = $("#DirectorateItem").val();
	var Directorate = $("#DirectorateItem").val();
    var Designation = $("#Designation").val();
    var UserId = $("#UserId").val();
	var PerformanceObjective = $("#PerformanceObjectiveCodeItem").val();
    var Project = $("#ProjectItem").val();
	var Activity = $("#ActivityItem").val();
	var PMI = $("#PMIItem").val();
	var PerformanceOutcome = $("#POItem").val();
    var CompletionDate = $("#CompletionDateItem").val();
    var WeightTotal = $("#WeightTotalItem").val();
    //var WeightTotal = "5";

	var frmData = new FormData();

	frmData.append("Perspective", Perspective);
	frmData.append("Directorate", Directorate);
    frmData.append("Designation", Designation);
    frmData.append("UserId", UserId);
	frmData.append("PerformanceObjective", PerformanceObjective);
    frmData.append("Project", Project);
	frmData.append("Activity", Activity);
	frmData.append("PMI", PMI);
	frmData.append("PerformanceOutcome", PerformanceOutcome);
    frmData.append("CompletionDate", CompletionDate);
	frmData.append("WeightTotal", WeightTotal);

	$.blockUI();
	$.ajax({
        type: "post",
		url: "/WorkPlans/InsertDirectorWorkplanLines",
		data: frmData,
		datatype: "json",
        contentType: false,
		processData: false,
		enctype: "multipart/form-data",
	    cache: false,
		success: function (result) {
			//$('#txtMessage').html(result.message);
			if (result.message=="success") {
				$('#ApplicationDocumentModal').modal('hide');
				//$('#errorMessage').hide();
                alert("Record Saved Successfully");
				LoadDirectorsWorkplanLines();
				$.unblockUI();
			}
            else if(result.message=="noheader"){
            $('#ApplicationDocumentModal').modal('hide');
             alert("Please Load CEO Workplan Lines first");
             LoadDirectorsWorkplanLines();
             $.unblockUI();
            }
            else {
            alert("An error Occurred, Please try Later");
				$('#errorMessage').html(result.message);
				$('#errorMessage').show();
				$.unblockUI();
			}
			Ladda.stopAll();
		},
		error: function (err) {
			$('#ApplicationDocumentModal').modal('show');
			$('#errorMessage').html(err.statusText);
			$('#errorMessage').show();
			Ladda.stopAll();
		}
	});
}






//Create Directors Workplan Header
   function CreateDirectorsHeader() {
    var Designation = $("#Designation").val();
    var UserId = $("#UserId").val();
    var Directorate=$("#Directorate").val();

	var frmData = new FormData();

	frmData.append("Designation",Designation);
	frmData.append("UserId",UserId);
    frmData.append("Directorate",Directorate);

	//Block UI
	$.blockUI();
	$.ajax({
		url: "/WorkPlans/CreateDirectorsWPHeader",
		type: "POST",
		data: frmData,
		dataType: 'json',
		contentType: false,
		processData: false,
		enctype: "multipart/form-data",
		cache: false,
		success: function (result) {
			$('#txtMessage').html(result.message);
			if (result.message=="youexist") {
                alert("You have already Loaded CEO Workplan Lines, You can add more Lines")
                LoadDirectorsWorkplanLines();
            }
            else if (result.message=="someoneexists") {
                alert("Failed, this Process has already been Initiated by another Director");
                LoadDirectorsWorkplanLines();
            }
            else if(result.message=="succeeded") {
             alert("CEO Workplan Lines Loaded Successfully");
             LoadDirectorsWorkplanLines();
            }
            else if(result.message=="ceonill") {
             alert("Failed, CEO Workplan has not been filled yet.");
              LoadDirectorsWorkplanLines();
            }
            else{
            alert("Failed, Please try again later");
            LoadDirectorsWorkplanLines();
            }
			$.unblockUI();
			Ladda.stopAll();
		},
		error: function (err) {
			Ladda.stopAll();
		}
	});
}

//Delete Director WorkPlan Line
function DeleteDirectorLine(Code) {
	var ans = confirm("Are you sure you want to remove this record ?");
	if (ans) {
		$.ajax({
			url: "/WorkPlans/DeleteDirectorWorkPlanLine",
			type: "POST",
			dataType: "json",
			data: { Code:Code },
			cache: false,
			success: function (result) {
            alert("Successfully Deleted");
				LoadDirectorsWorkplanLines();
			},
			error: function (errormessage) {
				alert("An Error occurred, Please try again later");
			}
		});
	}
}



//Load Load Directors WorkPlan Lines
    function LoadDirectorsWorkplanLines() {
    var Mydirectorate=$("#Mydirectorate").val();
	$.ajax({
		url: "/WorkPlans/LoadDirectorWorkplanLines",
		type: "post",
		dataType: "json",
		data: {Mydirectorate:Mydirectorate},
		cache: false,
		success: function (results) {
			var rows = "";
			$.each(results, function (i, result) {
				rows += "<tr>";
				rows += "<td>" + result.PerformanceObjective + "</td>";
				rows += "<td>" + result.Project + "</td>";
				rows += "<td>" + result.PerformanceOutcome + "</td>";
				rows += "<td>" + result.PMI + "</td>";
                rows += "<td>" + result.Activity + "</td>";
                rows += "<td>" + result.WeightTotal + "</td>";
                rows += "<td>" + result.CompletionDate + "</td>";
                rows += "<td>" + result.Perspective + "</td>";
                //rows += "<td>" + result.Designation + "</td>";
                //var Code=result.Code;

				rows += '<td><a href="#" onclick="return EditDirectorLine(\'' + result.Code + '\');"><i class="fa fa-pencil" style="color:blue" aria-hidden="true"><strong>Edit</strong></i></a> |<a href="#" onclick="return DeleteDirectorLine(\'' + result.Code + '\');"><i class="fa fa-trash" style="color:red" aria-hidden="true"><strong>Remove</strong></i></a></td>';
				rows += "</tr>";
			});
			$("#ApplicationDocumentsTbl tbody").html(rows);

			$("#AjaxLoader").css("display", "none");

			$("#ApplicationDocumentsTbl").css("display", "block");
		},
		error: function (xhr, status, error) {
		}
	});
    }

    //Edit Director Line
    function EditDirectorLine(Code) {

        $.ajax({
            url: "/WorkPlans/GetDirectorLineForEdit",
            type: "post",
            dataType: "json",
            data: { Code: Code },
            cache: false,
            success: function (result) {
                $("#DesignationItem").val(result.Designation);
                $("#DirectorateItem").val(result.Directorate);
                $("#PerspectiveItem").val(result.Perspective);
                $("#PerformanceObjectiveCodeItem").val(result.No);
                $("#ProjectItem").val(result.Project);
                $("#ActivityItem").val(result.Activity);
                $("#PMIItem").val(result.PMI);
                $("#POItem").val(result.PerformanceOutcome);
                //$("#CompletionDateItem").val(result.CompletionDate, 'dd/mm/yyyy');
                $("#CompletionDateItem").val(result.CompletionDate);
                $("#WeightTotalItem").val(result.WeightTotal);
                $("#UserCode").val(result.Code);
                $("#HeaderNo").val(result.HeaderNo);

                $('#errorMessage').hide();
                $("#ApplicationDocumentModal").modal("show");
                $("#UploadBtn").hide();
                $("#ModifyBtn").show();
            },
            error: function (xhr, status, error) {

            }
        });
        return false;
    }

    //Modify DIrector Workplan Line

    function ModifyDirectorWPLines() {
       var validLine = ValidateDirectorWorkPlanFields();
	if (validLine == false) {
		return false;
	}
        var Perspective = $("#PerspectiveItem").val();
        var Directorate = $("#DirectorateItem").val();
        //var Directorate = $("#DirectorateItem").val();
        var Designation = $("#DesignationItem").val();
        var PerformanceObjective = $("#PerformanceObjectiveCodeItem").val();
        var Project = $("#ProjectItem").val();
        var Activity = $("#ActivityItem").val();
        var PMI = $("#PMIItem").val();

        var PerformanceOutcome = $("#POItem").val();
        var CompletionDate = $("#CompletionDateItem").val();
        var WeightTotal = $("#WeightTotalItem").val();
        var UserCode = $("#UserCode").val();
        var HeaderNo = $("#HeaderNo").val();
        var frmData = new FormData();

        frmData.append("Perspective", Perspective);
        frmData.append("Directorate", Directorate);
        frmData.append("Designation", Designation);
        frmData.append("PerformanceObjective", PerformanceObjective);
        frmData.append("Project", Project);
        frmData.append("Activity", Activity);
        frmData.append("PMI", PMI);
        frmData.append("PerformanceOutcome", PerformanceOutcome);
        frmData.append("CompletionDate", CompletionDate);
        frmData.append("WeightTotal", WeightTotal);
        frmData.append("UserCode", UserCode);
        frmData.append("HeaderNo", HeaderNo);

        //var validLine = ValidateCEOWorkPlanFields();
        //if (validLine == false) {
            //return false;
        //}
        //Block UI
        $.blockUI();

        $.ajax({
            url: "/WorkPlans/ModifyDirectorWorkPlanLine",
            type: "POST",
            data: frmData,
            dataType: 'json',
            contentType: false,
            processData: false,
            enctype: "multipart/form-data",
            async: true,
            cache: false,
            success: function (result) {
                $('#txtMessage').html(result.message);
                if (result.success) {
                    $('#ApplicationDocumentModal').modal('hide');
                    $('#errorMessage').hide();
                    alert("Changes Saved Successfully");
                    LoadDirectorsWorkplanLines();
                    $.unblockUI();
                } else {
                    $('#errorMessage').html(result.message);
                    $('#errorMessage').show();
                    $.unblockUI();
                }
                Ladda.stopAll();
            },
            error: function (err) {
                $('#ApplicationDocumentModal').modal('show');
                $('#errorMessage').html(err.statusText);
                $('#errorMessage').show();
                Ladda.stopAll();
            }
        });
    }

    </script>